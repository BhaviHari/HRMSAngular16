{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { Validators, FormArray } from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport { NativeDateAdapter, DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { formatDate, DatePipe } from '@angular/common';\nimport { debounceTime, distinctUntilChanged, tap, switchMap, finalize, takeUntil, map } from 'rxjs/operators';\nimport { MatAutocompleteTrigger } from '@angular/material/autocomplete';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../error-handling.service\";\nimport * as i3 from \"ngx-spinner\";\nimport * as i4 from \"../notification.service\";\nimport * as i5 from \"ngx-toastr\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"../task.service\";\nimport * as i9 from \"../share.service\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/card\";\nimport * as i12 from \"@angular/material/icon\";\nimport * as i13 from \"@angular/material/tooltip\";\nimport * as i14 from \"@angular/material/input\";\nimport * as i15 from \"@angular/material/form-field\";\nimport * as i16 from \"@angular/material/select\";\nimport * as i17 from \"@angular/material/core\";\nimport * as i18 from \"@angular/material/autocomplete\";\nimport * as i19 from \"@angular/material/datepicker\";\nimport * as i20 from \"@angular/material/expansion\";\nconst _c0 = [\"appnm\"];\nconst _c1 = [\"appnmInput\"];\nconst _c2 = [\"clt\"];\nconst _c3 = [\"cltInput\"];\nconst _c4 = [\"modnm\"];\nconst _c5 = [\"modnmInput\"];\nconst _c6 = [\"unitHD\"];\nconst _c7 = [\"unitHDInput\"];\nconst _c8 = [\"teamld\"];\nconst _c9 = [\"teamldInput\"];\nconst _c10 = [\"emp\"];\nconst _c11 = [\"empInput\"];\nconst _c12 = [\"cltmaster\"];\nconst _c13 = [\"cltmasterInput\"];\nconst _c14 = [\"appnmmaster\"];\nconst _c15 = [\"appnmmasterInput\"];\nconst _c16 = [\"modnmmaster\"];\nconst _c17 = [\"modnmmasterInput\"];\nfunction TaskCreateComponent_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_25_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 65);\n    i0.ɵɵlistener(\"focusout\", function TaskCreateComponent_ng_container_25_mat_option_1_Template_mat_option_focusout_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r30);\n      const clt_r28 = restoredCtx.$implicit;\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r29.FocusOut_select_client(clt_r28));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const clt_r28 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", clt_r28);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", clt_r28.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_25_mat_option_1_Template, 2, 2, \"mat-option\", 64);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.clientList);\n  }\n}\nfunction TaskCreateComponent_mat_option_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_40_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 65);\n    i0.ɵɵlistener(\"focusout\", function TaskCreateComponent_ng_container_40_mat_option_1_Template_mat_option_focusout_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r34);\n      const appnm_r32 = restoredCtx.$implicit;\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r33.FocusOut_select_project(appnm_r32));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const appnm_r32 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", appnm_r32);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", appnm_r32.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_40_mat_option_1_Template, 2, 2, \"mat-option\", 64);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r7.appNameList);\n  }\n}\nfunction TaskCreateComponent_mat_option_54_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_55_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 67);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const modnm_r36 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", modnm_r36);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", modnm_r36.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_55_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_55_mat_option_1_Template, 2, 2, \"mat-option\", 66);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.moduleNameList);\n  }\n}\nfunction TaskCreateComponent_ng_container_83_mat_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 67);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const devtype_r47 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", devtype_r47.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", devtype_r47.text, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_83_mat_option_48_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_83_ng_container_49_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 67);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const dev_r49 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", dev_r49);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dev_r49.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_83_ng_container_49_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_83_ng_container_49_mat_option_1_Template, 2, 2, \"mat-option\", 66);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r45 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r45.developerList);\n  }\n}\nfunction TaskCreateComponent_ng_container_83_mat_icon_60_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r52 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-icon\", 81);\n    i0.ɵɵlistener(\"click\", function TaskCreateComponent_ng_container_83_mat_icon_60_Template_mat_icon_click_0_listener() {\n      i0.ɵɵrestoreView(_r52);\n      const i_r38 = i0.ɵɵnextContext().index;\n      const ctx_r50 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r50.removeSection(i_r38));\n    });\n    i0.ɵɵtext(1, \" delete\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_83_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r54 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0, 68);\n    i0.ɵɵelementStart(1, \"tr\", 69)(2, \"td\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"td\")(5, \"mat-label\");\n    i0.ɵɵtext(6, \"Dev Type\");\n    i0.ɵɵelementStart(7, \"label\", 4);\n    i0.ɵɵtext(8, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(9, \"br\");\n    i0.ɵɵelementStart(10, \"mat-form-field\", 45)(11, \"mat-select\", 70);\n    i0.ɵɵtemplate(12, TaskCreateComponent_ng_container_83_mat_option_12_Template, 2, 2, \"mat-option\", 66);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(13, \"td\")(14, \"mat-label\");\n    i0.ɵɵtext(15, \"Planned Start Date\");\n    i0.ɵɵelementStart(16, \"label\", 4);\n    i0.ɵɵtext(17, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(18, \"br\");\n    i0.ɵɵelementStart(19, \"mat-form-field\", 45)(20, \"input\", 71);\n    i0.ɵɵlistener(\"dateChange\", function TaskCreateComponent_ng_container_83_Template_input_dateChange_20_listener($event) {\n      i0.ɵɵrestoreView(_r54);\n      const ctx_r53 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r53.StartDate($event.value));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"mat-datepicker-toggle\", 50)(22, \"mat-datepicker\", null, 72);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(24, \"td\")(25, \"mat-label\");\n    i0.ɵɵtext(26, \"Planned End Date\");\n    i0.ɵɵelementStart(27, \"label\", 4);\n    i0.ɵɵtext(28, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(29, \"br\");\n    i0.ɵɵelementStart(30, \"mat-form-field\", 45);\n    i0.ɵɵelement(31, \"input\", 52)(32, \"mat-datepicker-toggle\", 50)(33, \"mat-datepicker\", null, 73);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(35, \"td\")(36, \"mat-label\");\n    i0.ɵɵtext(37, \"Developer \");\n    i0.ɵɵelementStart(38, \"label\", 4);\n    i0.ɵɵtext(39, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(40, \"br\");\n    i0.ɵɵelementStart(41, \"mat-form-field\", 5);\n    i0.ɵɵlistener(\"click\", function TaskCreateComponent_ng_container_83_Template_mat_form_field_click_41_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r54);\n      const i_r38 = restoredCtx.index;\n      const ctx_r55 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r55.developer(i_r38));\n    });\n    i0.ɵɵelement(42, \"input\", 74, 75);\n    i0.ɵɵelementStart(44, \"mat-icon\", 8);\n    i0.ɵɵtext(45, \"unfold_more\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(46, \"mat-autocomplete\", 9, 76);\n    i0.ɵɵlistener(\"opened\", function TaskCreateComponent_ng_container_83_Template_mat_autocomplete_opened_46_listener() {\n      i0.ɵɵrestoreView(_r54);\n      const ctx_r56 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r56.autocompletedevScroll());\n    });\n    i0.ɵɵtemplate(48, TaskCreateComponent_ng_container_83_mat_option_48_Template, 2, 0, \"mat-option\", 11);\n    i0.ɵɵtemplate(49, TaskCreateComponent_ng_container_83_ng_container_49_Template, 2, 1, \"ng-container\", 12);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(50, \"td\")(51, \"mat-label\");\n    i0.ɵɵtext(52, \"Task Name\");\n    i0.ɵɵelementStart(53, \"label\", 4);\n    i0.ɵɵtext(54, \"*\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(55, \"br\");\n    i0.ɵɵelementStart(56, \"mat-form-field\", 77);\n    i0.ɵɵelement(57, \"textarea\", 78);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(58, \"td\")(59, \"button\", 79);\n    i0.ɵɵtemplate(60, TaskCreateComponent_ng_container_83_mat_icon_60_Template, 2, 0, \"mat-icon\", 80);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const i_r38 = ctx.index;\n    const _r40 = i0.ɵɵreference(23);\n    const _r41 = i0.ɵɵreference(34);\n    const _r43 = i0.ɵɵreference(47);\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formGroupName\", i_r38);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i_r38 + 1);\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r12.devtypelist);\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"matDatepicker\", _r40)(\"min\", ctx_r12.set_Threedays_ago);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r40);\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"min\", ctx_r12.set_StartDate)(\"matDatepicker\", _r41);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"for\", _r41);\n    i0.ɵɵadvance(10);\n    i0.ɵɵproperty(\"matAutocomplete\", _r43);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"displayWith\", ctx_r12.displayFndev);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.isLoading);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r12.isLoading);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngIf\", ctx_r12.taskAddForm.get(\"data\")[\"controls\"].length > 1);\n  }\n}\nfunction TaskCreateComponent_mat_option_208_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_209_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r60 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 65);\n    i0.ɵɵlistener(\"focusout\", function TaskCreateComponent_ng_container_209_mat_option_1_Template_mat_option_focusout_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r60);\n      const clt_r58 = restoredCtx.$implicit;\n      const ctx_r59 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r59.FocusOut_select_clientmaster(clt_r58));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const clt_r58 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", clt_r58);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", clt_r58.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_209_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_209_mat_option_1_Template, 2, 2, \"mat-option\", 64);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r18 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r18.clientmasterList);\n  }\n}\nfunction TaskCreateComponent_mat_option_223_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_224_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r64 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-option\", 65);\n    i0.ɵɵlistener(\"focusout\", function TaskCreateComponent_ng_container_224_mat_option_1_Template_mat_option_focusout_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r64);\n      const appnm_r62 = restoredCtx.$implicit;\n      const ctx_r63 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r63.FocusOut_select_projectmaster(appnm_r62));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const appnm_r62 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", appnm_r62);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", appnm_r62.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_224_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_224_mat_option_1_Template, 2, 2, \"mat-option\", 64);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r22 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r22.appNamemasterList);\n  }\n}\nfunction TaskCreateComponent_mat_option_238_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 63);\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TaskCreateComponent_ng_container_239_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 67);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const modnm_r66 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", modnm_r66);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", modnm_r66.name, \" \");\n  }\n}\nfunction TaskCreateComponent_ng_container_239_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TaskCreateComponent_ng_container_239_mat_option_1_Template, 2, 2, \"mat-option\", 66);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r26.moduleNamemasterList);\n  }\n}\nexport const PICK_FORMATS = {\n  parse: {\n    dateInput: {\n      month: 'short',\n      year: 'numeric',\n      day: 'numeric'\n    }\n  },\n  display: {\n    dateInput: 'input',\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    }\n  }\n};\nclass PickDateAdapter extends NativeDateAdapter {\n  format(date, displayFormat) {\n    if (displayFormat === 'input') {\n      return formatDate(date, 'dd-MMM-yyyy', this.locale);\n    } else {\n      return date.toDateString();\n    }\n  }\n}\nexport class TaskCreateComponent {\n  formBuilder;\n  errorHandler;\n  SpinnerService;\n  notification;\n  toastr;\n  datePipe;\n  router;\n  taskservice;\n  taskShare;\n  taskAddForm;\n  clientForm;\n  projectForm;\n  moduleForm;\n  mappingForm;\n  isLoading = false;\n  devtypelist;\n  has_next = true;\n  has_previous = true;\n  currentpage = 1;\n  // setdate = new Date()\n  hasnextdevname = true;\n  haspreviousdevname = true;\n  currentpagedevname = 1;\n  appNameList;\n  clientList;\n  moduleNameList;\n  unitheadList;\n  developerList;\n  teamldList;\n  empList;\n  chipSelectedemp = [];\n  chipSelectedempid = [];\n  employee_arr = new FormControl();\n  task_Id;\n  set_Threedays_ago;\n  appNamemasterList;\n  clientmasterList;\n  moduleNamemasterList;\n  matAutocomplete;\n  autocompleteTrigger;\n  appnmInput;\n  matclientAutocomplete;\n  cltInput;\n  matmodulenameAutocomplete;\n  modnmInput;\n  matunitheadAutocomplete;\n  unitHDInput;\n  matteamleadAutocomplete;\n  teamldInput;\n  // developer name \n  matempAutocomplete;\n  empInput;\n  separatorKeysCodes = [ENTER, COMMA];\n  onCancel = new EventEmitter();\n  onSubmit = new EventEmitter();\n  // master\n  matclientmasterAutocomplete;\n  cltmasterInput;\n  maprotmasterAutocomplete;\n  appnmmasterInput;\n  matmodulenamemasterAutocomplete;\n  modnmmasterInput;\n  constructor(formBuilder, errorHandler, SpinnerService, notification, toastr, datePipe, router, taskservice, taskShare) {\n    this.formBuilder = formBuilder;\n    this.errorHandler = errorHandler;\n    this.SpinnerService = SpinnerService;\n    this.notification = notification;\n    this.toastr = toastr;\n    this.datePipe = datePipe;\n    this.router = router;\n    this.taskservice = taskservice;\n    this.taskShare = taskShare;\n  }\n  ngOnInit() {\n    let d = new Date();\n    console.log('Today is: ' + d);\n    d.setDate(d.getDate() - 3);\n    console.log('3 days ago was: ' + d);\n    this.set_Threedays_ago = d;\n    this.taskAddForm = this.formBuilder.group({\n      app_id: ['', Validators.required],\n      client: ['', Validators.required],\n      // type: ['', Validators.required],\n      project_map_id: ['', Validators.required],\n      // unit_head: ['', Validators.required],\n      // team_lead: ['', Validators.required],\n      // employee_arr: ['', Validators.required],\n      // task: ['', Validators.required],\n      // start_date: [''],\n      // end_date: [''],\n      // data: new FormArray([\n      //   this.dataForTask \n      // ])\n      data: new FormArray([])\n    });\n    // client form\n    this.clientForm = this.formBuilder.group({\n      name: ['']\n    });\n    // project form\n    this.projectForm = this.formBuilder.group({\n      name: [''],\n      start_date: [''],\n      end_date: ['']\n    });\n    // module form\n    this.moduleForm = this.formBuilder.group({\n      name: ['']\n    });\n    // mapping form\n    this.mappingForm = this.formBuilder.group({\n      client_id: [''],\n      project_id: [''],\n      module_id: ['']\n    });\n    this.getdevtype();\n    this.getTask();\n    // /this.ggg();\n  }\n  // get dataForTask(): FormGroup {\n  //   let FormGroupArray = this.formBuilder.group({\n  //     type: '',\n  //     start_date: '',\n  //     end_date: '',\n  //     developer: '',\n  //     task: ''\n  //   })\n  //   return FormGroupArray\n  // }\n  // AddTask(){\n  //   let control = this.taskAddForm.get(\"data\") as FormArray;\n  //   control.push(this.dataForTask)\n  // }\n  getTask() {\n    // if (this.editappraisal) {\n    //   // this.vowecfservice.getedit(this.editappraisal)\n    //   //   .subscribe(results => {\n    //   //       this.getappraisallist(results)\n    //   //   })\n    // }\n    // else {\n    this.taskAddForm.get('data').push(this.getdetails());\n    // }\n  }\n  getdetails() {\n    let group = new FormGroup({\n      dev_type: new FormControl(''),\n      start_date: new FormControl(''),\n      end_date: new FormControl(''),\n      developer: new FormControl(''),\n      task: new FormControl('')\n    });\n    return group;\n  }\n  addSection() {\n    const control = this.taskAddForm.get('data');\n    control.push(this.getdetails());\n  }\n  removeSection(i) {\n    const control = this.taskAddForm.get('data');\n    control.removeAt(i);\n  }\n  getSections(forms) {\n    return forms.controls.data.controls;\n  }\n  step = 0;\n  setStep(index) {\n    this.step = index;\n  }\n  master() {\n    // client form\n    this.clientForm = this.formBuilder.group({\n      name: ['']\n    });\n    // project form\n    this.projectForm = this.formBuilder.group({\n      name: [''],\n      start_date: [''],\n      end_date: ['']\n    });\n    // module form\n    this.moduleForm = this.formBuilder.group({\n      name: ['']\n    });\n    // mapping form\n    this.mappingForm = this.formBuilder.group({\n      client_id: [''],\n      project_id: [''],\n      module_id: ['']\n    });\n  }\n  getdevtype() {\n    this.taskservice.getdevtype().subscribe(results => {\n      let datas = results[\"data\"];\n      this.devtypelist = datas;\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  // app name\n  appName() {\n    let appkeyvalue = \"\";\n    this.getappName(appkeyvalue);\n    this.taskAddForm.get('app_id').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getappNameFilter(this.client_Id, value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.appNameList = datas;\n    });\n  }\n  getappName(appkeyvalue) {\n    this.taskservice.getappNameFilter(this.client_Id, appkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.appNameList = datas;\n    });\n  }\n  displayFnappnm(appnm) {\n    return appnm ? appnm.name : undefined;\n  }\n  get appnm() {\n    return this.taskAddForm.value.get('app_id');\n  }\n  // client\n  client() {\n    let cltkeyvalue = \"\";\n    this.getclt(cltkeyvalue);\n    this.taskAddForm.get('client').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getcltFilter(value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.clientList = datas;\n    });\n  }\n  getclt(cltkeyvalue) {\n    this.taskservice.getcltFilter(cltkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.clientList = datas;\n    });\n  }\n  displayFnclt(clt) {\n    return clt ? clt.name : undefined;\n  }\n  get clt() {\n    return this.taskAddForm.value.get('client');\n  }\n  // module name\n  moduleName() {\n    let modkeyvalue = \"\";\n    this.getModuleName(modkeyvalue);\n    this.taskAddForm.get('project_map_id').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getmodulenameFilter(this.client_Id, this.project_Id, value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.moduleNameList = datas;\n    });\n  }\n  getModuleName(modkeyvalue) {\n    this.taskservice.getmodulenameFilter(this.client_Id, this.project_Id, modkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.moduleNameList = datas;\n    });\n  }\n  displayFnmodnm(mod) {\n    return mod ? mod.name : undefined;\n  }\n  get mod() {\n    return this.taskAddForm.value.get('module_id');\n  }\n  // unit head\n  unitHead() {\n    let unithdkeyvalue = \"\";\n    this.getUnitHead(unithdkeyvalue);\n    this.taskAddForm.get('unit_head').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getUnitHeadFilter(value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.unitheadList = datas;\n    });\n  }\n  getUnitHead(unithdkeyvalue) {\n    this.taskservice.getUnitHeadFilter(unithdkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.unitheadList = datas;\n    });\n  }\n  displayFnunitHD(unithd) {\n    return unithd ? unithd.name : undefined;\n  }\n  get unithd() {\n    return this.taskAddForm.value.get('unit_head');\n  }\n  // Team lead\n  TeamLead() {\n    let teamldkeyvalue = \"\";\n    this.getTeamLead(teamldkeyvalue);\n    this.taskAddForm.get('team_lead').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getTeamLeadFilter(value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.teamldList = datas;\n    });\n  }\n  getTeamLead(teamldkeyvalue) {\n    this.taskservice.getTeamLeadFilter(teamldkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.teamldList = datas;\n    });\n  }\n  displayFnteamld(teamld) {\n    return teamld ? teamld.name : undefined;\n  }\n  get teamld() {\n    return this.taskAddForm.value.get('team_lead');\n  }\n  // developer name\n  developer(i) {\n    let devkeyvalue = \"\";\n    this.getDeveloper(devkeyvalue);\n    this.taskAddForm.get('data').at(i).get('developer').valueChanges\n    // this.taskAddForm.get('developer').valueChanges\n    .pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getdeveloperFilter(value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.developerList = datas;\n    });\n  }\n  getDeveloper(unithdkeyvalue) {\n    this.taskservice.getdeveloperFilter(unithdkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.developerList = datas;\n    });\n  }\n  displayFndev(emp) {\n    return emp ? emp.name : undefined;\n  }\n  get emp() {\n    return this.taskAddForm.value.get('developer');\n  }\n  autocompletedevScroll() {\n    setTimeout(() => {\n      if (this.matempAutocomplete && this.autocompleteTrigger && this.matempAutocomplete.panel) {\n        fromEvent(this.matempAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matempAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matempAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matempAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matempAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.hasnextdevname === true) {\n              this.taskservice.getdeveloperFilter(this.empInput.nativeElement.value, this.currentpagedevname + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.empList = this.empList.concat(datas);\n                if (this.empList.length >= 0) {\n                  this.hasnextdevname = datapagination.has_next;\n                  this.haspreviousdevname = datapagination.has_previous;\n                  this.currentpagedevname = datapagination.index;\n                }\n              }, error => {});\n            }\n          }\n        });\n      }\n    });\n  }\n  // client master\n  clientmaster() {\n    let teamldkeyvalue = \"\";\n    this.getclientmaster(teamldkeyvalue);\n    this.mappingForm.get('client_id').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getclientmasterFilter(value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.clientmasterList = datas;\n    });\n  }\n  getclientmaster(teamldkeyvalue) {\n    this.taskservice.getclientmasterFilter(teamldkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.clientmasterList = datas;\n    });\n  }\n  displayFncltmaster(cltmaster) {\n    return cltmaster ? cltmaster.name : undefined;\n  }\n  get cltmaster() {\n    return this.mappingForm.value.get('client_id');\n  }\n  client_master_Id = 0;\n  FocusOut_select_clientmaster(data) {\n    console.log(\"client master\", data);\n    this.client_master_Id = data.id;\n  }\n  clearproject() {\n    this.taskAddForm.controls['app_id'].reset(\"\");\n    this.taskAddForm.controls['module_id'].reset(\"\");\n  }\n  clearmodule() {\n    this.taskAddForm.controls['module_id'].reset(\"\");\n  }\n  // project master\n  projectnamemaster() {\n    let teamldkeyvalue = \"\";\n    this.getprojectnamemaster(teamldkeyvalue);\n    this.mappingForm.get('project_id').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getprojectnamemasterFilter(this.client_master_Id, value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.appNamemasterList = datas;\n    });\n  }\n  getprojectnamemaster(teamldkeyvalue) {\n    this.taskservice.getprojectnamemasterFilter(this.client_master_Id, teamldkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.appNamemasterList = datas;\n    });\n  }\n  displayFnappnmmaster(promaster) {\n    return promaster ? promaster.name : undefined;\n  }\n  get promaster() {\n    return this.mappingForm.value.get('project_id');\n  }\n  project_master_Id = 0;\n  FocusOut_select_projectmaster(data) {\n    console.log(\"project master\", data);\n    this.project_master_Id = data.id;\n  }\n  // module master\n  modulenamemaster() {\n    let teamldkeyvalue = \"\";\n    this.getmodulenamemaster(teamldkeyvalue);\n    this.mappingForm.get('module_id').valueChanges.pipe(debounceTime(100), distinctUntilChanged(), tap(() => {\n      this.isLoading = true;\n      console.log('inside tap');\n    }), switchMap(value => this.taskservice.getmodulenamemasterFilter(this.client_master_Id, this.project_master_Id, value, 1).pipe(finalize(() => {\n      this.isLoading = false;\n    })))).subscribe(results => {\n      let datas = results[\"data\"];\n      this.moduleNamemasterList = datas;\n    });\n  }\n  getmodulenamemaster(teamldkeyvalue) {\n    this.taskservice.getmodulenamemasterFilter(this.client_master_Id, this.project_master_Id, teamldkeyvalue, 1).subscribe(results => {\n      let datas = results[\"data\"];\n      this.moduleNamemasterList = datas;\n    });\n  }\n  displayFnmodnmmaster(modmaster) {\n    return modmaster ? modmaster.name : undefined;\n  }\n  get modmaster() {\n    return this.mappingForm.value.get('module_id');\n  }\n  // createFormate() {\n  //   let data = this.taskAddForm.controls;\n  //   console.log(\"create formate\",data)\n  //   let taskclass = new task();\n  //   taskclass.app_id = data['app_id'].value.id;\n  //   taskclass.client = data['client'].value.id;\n  //   taskclass.type = data['type'].value;\n  //   taskclass.module_id = data['module_id'].value.id;\n  //   // taskclass.unit_head = data['unit_head'].value.id;\n  //   // taskclass.team_lead = data['team_lead'].value.id;\n  //   // taskclass.developername = data['developername'].value;\n  //   taskclass.task = data['task'].value;\n  //   taskclass.start_date = data['start_date'].value;\n  //   taskclass.end_date = data['end_date'].value;\n  //   let dateValue = this.taskAddForm.value;\n  //   taskclass.start_date = this.datePipe.transform(dateValue.start_date, 'yyyy-MM-dd');\n  //   taskclass.end_date = this.datePipe.transform(dateValue.end_date, 'yyyy-MM-dd');\n  //   console.log(\"taskclass\", taskclass)\n  //   return taskclass;\n  // }\n  submitForm() {\n    // this.taskAddForm.value.developername = this.chipSelectedempid;\n    this.SpinnerService.show();\n    if (this.taskAddForm.value.client.id === undefined || this.taskAddForm.value.client === \"\") {\n      this.toastr.error('Please Select Valid Client');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.taskAddForm.value.app_id.id === undefined || this.taskAddForm.value.app_id === \"\") {\n      this.toastr.error('Please Select Valid Project ');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.taskAddForm.value.project_map_id.id === undefined || this.taskAddForm.value.project_map_id === \"\") {\n      this.toastr.error('Please Select Valid Module');\n      this.SpinnerService.hide();\n      return false;\n    }\n    // if (this.taskAddForm.value.type === undefined || this.taskAddForm.value.type === \"\") {\n    //   this.toastr.error('Please Select Valid Dev Type');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.taskAddForm.value.unit_head.id === undefined || this.taskAddForm.value.unit_head === \"\") {\n    //   this.toastr.error('Please Select Valid Unit Head');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.taskAddForm.value.team_lead.id === undefined || this.taskAddForm.value.team_lead === \"\") {\n    //   this.toastr.error('Please Select Valid Team Lead');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.taskAddForm.value.start_date === \"\") {\n    //   this.toastr.error('Please Select Start Date');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.taskAddForm.value.end_date === \"\") {\n    //   this.toastr.error('Please Select End Date');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.taskAddForm.value.task === \"\") {\n    //   this.toastr.error('Please Enter Task');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    // if (this.chipSelectedempid.length === 0) {\n    //   this.toastr.error('Please Select Developer Name');\n    //   this.SpinnerService.hide();\n    //   return false;\n    // }\n    let details = this.taskAddForm.value.data;\n    for (let i = 0; i < details.length; i++) {\n      if (details[i].dev_type == '' || details[i].dev_type == null || details[i].dev_type == undefined) {\n        this.notification.showError('Please Select Developer Type');\n        this.SpinnerService.hide();\n        return false;\n      }\n      if (details[i].start_date == '') {\n        this.notification.showError('Please Select Planned Start Date');\n        this.SpinnerService.hide();\n        return false;\n      }\n      if (details[i].end_date == '') {\n        this.notification.showError('Please Select Planned End Date');\n        this.SpinnerService.hide();\n        return false;\n      }\n      if (details[i].developer.id === undefined || details[i].developer === \"\") {\n        this.toastr.error('Please Select Valid Developer');\n        this.SpinnerService.hide();\n        return false;\n      }\n      if (details[i].task == '') {\n        this.notification.showError('Please Enter Task Name');\n        this.SpinnerService.hide();\n        return false;\n      }\n    }\n    this.taskAddForm.value.project_map_id = this.taskAddForm.value.project_map_id.mapping_id;\n    for (let i in details) {\n      details[i].developer = details[i].developer.id;\n      details[i].start_date = this.datePipe.transform(details[i].start_date, 'yyyy-MM-dd');\n      details[i].end_date = this.datePipe.transform(details[i].end_date, 'yyyy-MM-dd');\n    }\n    console.log(\"create\", this.taskAddForm.value);\n    this.taskservice.taskCreateForm(this.taskAddForm.value).subscribe(res => {\n      console.log(\"vendor\", res);\n      if (res.message === \"Successfully Created\") {\n        this.notification.showSuccess(\"Created Successfully!...\");\n        this.SpinnerService.hide();\n        this.onSubmit.emit();\n      } else {\n        this.notification.showError(res.description);\n        this.SpinnerService.hide();\n        return false;\n      }\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  // app name\n  autocompleteAppnmScroll() {\n    setTimeout(() => {\n      if (this.matAutocomplete && this.autocompleteTrigger && this.matAutocomplete.panel) {\n        fromEvent(this.matAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getappNameFilter(this.client_Id, this.appnmInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.appNameList = this.appNameList.concat(datas);\n                if (this.appNameList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // client\n  autocompleteCltScroll() {\n    setTimeout(() => {\n      if (this.matclientAutocomplete && this.autocompleteTrigger && this.matclientAutocomplete.panel) {\n        fromEvent(this.matclientAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matclientAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matclientAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matclientAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matclientAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getcltFilter(this.cltInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.clientList = this.clientList.concat(datas);\n                if (this.clientList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // module name\n  autocompletemodnmScroll() {\n    setTimeout(() => {\n      if (this.matmodulenameAutocomplete && this.autocompleteTrigger && this.matmodulenameAutocomplete.panel) {\n        fromEvent(this.matmodulenameAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matmodulenameAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matmodulenameAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matmodulenameAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matmodulenameAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getmodulenameFilter(this.client_Id, this.project_Id, this.modnmInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.moduleNameList = this.moduleNameList.concat(datas);\n                if (this.moduleNameList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // unit head\n  autocompleteuntheadScroll() {\n    setTimeout(() => {\n      if (this.matunitheadAutocomplete && this.autocompleteTrigger && this.matunitheadAutocomplete.panel) {\n        fromEvent(this.matunitheadAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matunitheadAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matunitheadAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matunitheadAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matunitheadAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getUnitHeadFilter(this.unitHDInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.unitheadList = this.unitheadList.concat(datas);\n                if (this.unitheadList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // team  lead\n  autocompleteteteamldScroll() {\n    setTimeout(() => {\n      if (this.matteamleadAutocomplete && this.autocompleteTrigger && this.matteamleadAutocomplete.panel) {\n        fromEvent(this.matteamleadAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matteamleadAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matteamleadAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matteamleadAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matteamleadAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getTeamLeadFilter(this.teamldInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.teamldList = this.teamldList.concat(datas);\n                if (this.teamldList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // client master\n  autocompleteCltmasterScroll() {\n    setTimeout(() => {\n      if (this.matclientmasterAutocomplete && this.autocompleteTrigger && this.matclientmasterAutocomplete.panel) {\n        fromEvent(this.matclientmasterAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matclientmasterAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matclientmasterAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matclientmasterAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matclientmasterAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getclientmasterFilter(this.cltmasterInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.clientmasterList = this.clientmasterList.concat(datas);\n                if (this.clientmasterList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // project master\n  autocompleteAppnmmasterScroll() {\n    setTimeout(() => {\n      if (this.maprotmasterAutocomplete && this.autocompleteTrigger && this.maprotmasterAutocomplete.panel) {\n        fromEvent(this.maprotmasterAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.maprotmasterAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.maprotmasterAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.maprotmasterAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.maprotmasterAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getprojectnamemasterFilter(this.client_master_Id, this.appnmmasterInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.appNamemasterList = this.appNamemasterList.concat(datas);\n                if (this.appNamemasterList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  // module master\n  autocompletemodnmmasterScroll() {\n    setTimeout(() => {\n      if (this.matmodulenamemasterAutocomplete && this.autocompleteTrigger && this.matmodulenamemasterAutocomplete.panel) {\n        fromEvent(this.matmodulenamemasterAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matmodulenamemasterAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.has_next === true) {\n              this.taskservice.getmodulenamemasterFilter(this.client_master_Id, this.project_master_Id, this.modnmmasterInput.nativeElement.value, this.currentpage + 1).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.moduleNamemasterList = this.moduleNamemasterList.concat(datas);\n                if (this.moduleNamemasterList.length >= 0) {\n                  this.has_next = datapagination.has_next;\n                  this.has_previous = datapagination.has_previous;\n                  this.currentpage = datapagination.index;\n                }\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n  getemp(keyvalue, type) {\n    this.taskservice.employeesearch(keyvalue, 1, type).subscribe(results => {\n      this.SpinnerService.hide();\n      let datas = results[\"data\"];\n      this.empList = datas;\n      console.log(\"emp data get \", this.empList);\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  removedemp(emp) {\n    const index = this.chipSelectedemp.indexOf(emp);\n    if (index >= 0) {\n      this.chipSelectedemp.splice(index, 1);\n      console.log(this.chipSelectedemp);\n      this.chipSelectedempid.splice(index, 1);\n      console.log(this.chipSelectedempid);\n      this.empInput.nativeElement.value = '';\n    }\n  }\n  empSelected(event) {\n    console.log('event.option.value', event.option.value);\n    this.selectempByName(event.option.value.name);\n    this.empInput.nativeElement.value = '';\n    console.log('chipSelectedempid', this.chipSelectedempid);\n  }\n  selectempByName(emp) {\n    let foundemp1 = this.chipSelectedemp.filter(e => e.name == emp);\n    if (foundemp1.length) {\n      return;\n    }\n    let foundemp = this.empList.filter(e => e.name == emp);\n    if (foundemp.length) {\n      this.chipSelectedemp.push(foundemp[0]);\n      this.chipSelectedempid.push(foundemp[0].id);\n    }\n  }\n  autocompleteempScroll(type) {\n    setTimeout(() => {\n      if (this.matempAutocomplete && this.autocompleteTrigger && this.matempAutocomplete.panel) {\n        fromEvent(this.matempAutocomplete.panel.nativeElement, 'scroll').pipe(map(x => this.matempAutocomplete.panel.nativeElement.scrollTop), takeUntil(this.autocompleteTrigger.panelClosingActions)).subscribe(x => {\n          const scrollTop = this.matempAutocomplete.panel.nativeElement.scrollTop;\n          const scrollHeight = this.matempAutocomplete.panel.nativeElement.scrollHeight;\n          const elementHeight = this.matempAutocomplete.panel.nativeElement.clientHeight;\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\n          if (atBottom) {\n            if (this.hasnextdevname === true) {\n              this.taskservice.employeesearch(this.empInput.nativeElement.value, this.currentpagedevname + 1, type).subscribe(results => {\n                let datas = results[\"data\"];\n                let datapagination = results[\"pagination\"];\n                this.empList = this.empList.concat(datas);\n                if (this.empList.length >= 0) {\n                  this.hasnextdevname = datapagination.has_next;\n                  this.haspreviousdevname = datapagination.has_previous;\n                  this.currentpagedevname = datapagination.index;\n                }\n              }, error => {});\n            }\n          }\n        });\n      }\n    });\n  }\n  set_StartDate;\n  StartDate(event) {\n    const date = new Date(event);\n    // this.ss1 = date\n    this.set_StartDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  //     const currentYear = new Date().getFullYear();\n  //     this.setdefault_date = new Date(currentYear - 0, 0, 22);\n  // }\n  client_Id = 0;\n  FocusOut_select_client(data) {\n    console.log(\"client\", data);\n    this.client_Id = data.id;\n    console.log(\"client- id\", this.client_Id);\n  }\n  project_Id = 0;\n  FocusOut_select_project(data) {\n    console.log(\"client\", data);\n    this.project_Id = data.id;\n    console.log(\"project- id\", this.project_Id);\n  }\n  developer_List = [];\n  getTaskEdit() {\n    this.taskservice.gettaskview(this.task_Id).subscribe(result => {\n      let data = result;\n      console.log(\"totalldata\", data);\n      this.developer_List = data.dev_arr;\n      const startdate = this.datePipe.transform(data.start_date, 'yyyy-MM-dd');\n      const enddate = this.datePipe.transform(data.end_date, 'yyyy-MM-dd');\n      this.taskAddForm.patchValue({\n        // \"app_id\": data.app_id,\n        // \"client\": data.client_name,\n        // \"type\": data.dev_type,\n        // \"module_id\" : data.module_id,\n        \"unit_head\": data.unit_head,\n        \"team_lead\": data.team_lead,\n        \"employee_arr\": data.developer_List,\n        \"task\": data.task_status,\n        \"start_date\": startdate,\n        \"end_date\": enddate\n      });\n    });\n  }\n  clientSubmit() {\n    this.SpinnerService.show();\n    if (this.clientForm.value.name === \"\") {\n      this.toastr.error('Please Enter Client');\n      this.SpinnerService.hide();\n      return false;\n    }\n    this.taskservice.clientForm(this.clientForm.value).subscribe(res => {\n      console.log(\"client click\", res);\n      if (res.message == 'Successfully Created') {\n        this.notification.showSuccess(\"Created Successfully!...\");\n        this.clientForm = this.formBuilder.group({\n          name: ['']\n        });\n        this.SpinnerService.hide();\n      } else {\n        this.notification.showError(res.description);\n        this.SpinnerService.hide();\n        return false;\n      }\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  projectSubmit() {\n    this.SpinnerService.show();\n    if (this.projectForm.value.name === \"\") {\n      this.toastr.error('Please Enter Project');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.projectForm.value.start_date === \"\") {\n      this.toastr.error('Please Select Start Date');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.projectForm.value.end_date === \"\") {\n      this.toastr.error('Please Select End Date');\n      this.SpinnerService.hide();\n      return false;\n    }\n    let dateValue = this.projectForm.value;\n    dateValue.start_date = this.datePipe.transform(dateValue.start_date, 'yyyy-MM-dd');\n    dateValue.end_date = this.datePipe.transform(dateValue.end_date, 'yyyy-MM-dd');\n    this.taskservice.projectForm(this.projectForm.value).subscribe(res => {\n      console.log(\"project click\", res);\n      if (res.message == 'Successfully Created') {\n        this.notification.showSuccess(\"Created Successfully!...\");\n        this.projectForm = this.formBuilder.group({\n          name: [''],\n          start_date: [''],\n          end_date: ['']\n        });\n        this.SpinnerService.hide();\n      } else {\n        this.notification.showError(res.description);\n        this.SpinnerService.hide();\n        return false;\n      }\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  moduleSubmit() {\n    this.SpinnerService.show();\n    if (this.moduleForm.value.name === \"\") {\n      this.toastr.error('Please Enter Module');\n      this.SpinnerService.hide();\n      return false;\n    }\n    this.taskservice.moduleForm(this.moduleForm.value).subscribe(res => {\n      console.log(\"module click\", res);\n      if (res.message == 'Successfully Created') {\n        this.notification.showSuccess(\"Created Successfully!...\");\n        this.moduleForm = this.formBuilder.group({\n          name: ['']\n        });\n        this.SpinnerService.hide();\n      } else {\n        this.notification.showError(res.description);\n        this.SpinnerService.hide();\n        return false;\n      }\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  mappingSubmit() {\n    this.SpinnerService.show();\n    if (this.mappingForm.value.client_id === \"\") {\n      this.toastr.error('Please Select Vaild Client');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.mappingForm.value.project_id === \"\") {\n      this.toastr.error('Please Select Vaild Project');\n      this.SpinnerService.hide();\n      return false;\n    }\n    if (this.mappingForm.value.module_id === \"\") {\n      this.toastr.error('Please Select Vaild Module');\n      this.SpinnerService.hide();\n      return false;\n    }\n    this.taskservice.mappingForm(this.createFormatemapping()).subscribe(res => {\n      console.log(\"module click\", res);\n      if (res.message == 'Successfully Created') {\n        this.notification.showSuccess(\"Created Successfully!...\");\n        this.mappingForm = this.formBuilder.group({\n          client_id: [''],\n          project_id: [''],\n          module_id: ['']\n        });\n        this.SpinnerService.hide();\n      } else {\n        this.notification.showError(res.description);\n        this.SpinnerService.hide();\n        return false;\n      }\n    }, error => {\n      this.errorHandler.handleError(error);\n      this.SpinnerService.hide();\n    });\n  }\n  createFormatemapping() {\n    let data = this.mappingForm.controls;\n    let taskmasterclass = new taskmaster();\n    taskmasterclass.client_id = data['client_id'].value.id;\n    taskmasterclass.project_id = data['project_id'].value.id;\n    taskmasterclass.module_id = data['module_id'].value.module_id;\n    return taskmasterclass;\n  }\n  set_masterStartDate;\n  MasterStartDate(event) {\n    const date = new Date(event);\n    this.set_masterStartDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  oncancel() {\n    this.onCancel.emit();\n  }\n  Documentfilearray = [];\n  onFileSelected(e) {\n    console.log(\"e in file\", e);\n    for (var i = 0; i < e.target.files.length; i++) {\n      this.Documentfilearray.push(e.target.files[i]);\n    }\n    console.log(\"document array===>\", this.Documentfilearray);\n  }\n  deleteInlineFile(fileindex, data) {\n    console.log(\"fileindex\", fileindex);\n    let filedata = this.Documentfilearray;\n    console.log(\"filedata for delete before\", filedata);\n    console.log(\"filedata selected\", data);\n    filedata.splice(fileindex, 1);\n    console.log(\"filedata for delete after\", filedata);\n  }\n  static ɵfac = function TaskCreateComponent_Factory(t) {\n    return new (t || TaskCreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ErrorHandlingService), i0.ɵɵdirectiveInject(i3.NgxSpinnerService), i0.ɵɵdirectiveInject(i4.NotificationService), i0.ɵɵdirectiveInject(i5.ToastrService), i0.ɵɵdirectiveInject(i6.DatePipe), i0.ɵɵdirectiveInject(i7.Router), i0.ɵɵdirectiveInject(i8.TaskService), i0.ɵɵdirectiveInject(i9.ShareService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskCreateComponent,\n    selectors: [[\"app-task-create\"]],\n    viewQuery: function TaskCreateComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(MatAutocompleteTrigger, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n        i0.ɵɵviewQuery(_c3, 5);\n        i0.ɵɵviewQuery(_c4, 5);\n        i0.ɵɵviewQuery(_c5, 5);\n        i0.ɵɵviewQuery(_c6, 5);\n        i0.ɵɵviewQuery(_c7, 5);\n        i0.ɵɵviewQuery(_c8, 5);\n        i0.ɵɵviewQuery(_c9, 5);\n        i0.ɵɵviewQuery(_c10, 5);\n        i0.ɵɵviewQuery(_c11, 5);\n        i0.ɵɵviewQuery(_c12, 5);\n        i0.ɵɵviewQuery(_c13, 5);\n        i0.ɵɵviewQuery(_c14, 5);\n        i0.ɵɵviewQuery(_c15, 5);\n        i0.ɵɵviewQuery(_c16, 5);\n        i0.ɵɵviewQuery(_c17, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autocompleteTrigger = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.appnmInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matclientAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cltInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matmodulenameAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modnmInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matunitheadAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitHDInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matteamleadAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.teamldInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matempAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.empInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matclientmasterAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cltmasterInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.maprotmasterAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.appnmmasterInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.matmodulenamemasterAutocomplete = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modnmmasterInput = _t.first);\n      }\n    },\n    outputs: {\n      onCancel: \"onCancel\",\n      onSubmit: \"onSubmit\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: DateAdapter,\n      useClass: PickDateAdapter\n    }, {\n      provide: MAT_DATE_FORMATS,\n      useValue: PICK_FORMATS\n    }, DatePipe])],\n    decls: 242,\n    vars: 40,\n    consts: [[2, \"margin-top\", \"13px\", \"margin-right\", \"20px\", \"margin-bottom\", \"20px\"], [2, \"margin-left\", \"5px\", \"margin-top\", \"1%\", \"width\", \"100%\"], [1, \"header\"], [\"autocomplete\", \"off\", 3, \"formGroup\"], [2, \"color\", \"red\"], [\"appearance\", \"outline\", 1, \"matformfieldstyle\", 3, \"click\"], [\"matInput\", \"\", \"formControlName\", \"client\", \"required\", \"\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\", \"click\"], [\"cltInput\", \"\"], [\"matSuffix\", \"\", 1, \"maticonsize\"], [3, \"displayWith\", \"opened\"], [\"clt\", \"matAutocomplete\"], [\"class\", \"is-loading\", 4, \"ngIf\"], [4, \"ngIf\"], [2, \"margin-left\", \"30px\"], [\"appearance\", \"outline\", 1, \"matformfieldstyle\", 2, \"margin-left\", \"30px\", 3, \"click\"], [\"matInput\", \"\", \"formControlName\", \"app_id\", \"required\", \"\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\", \"click\"], [\"appnmInput\", \"\"], [\"appnm\", \"matAutocomplete\"], [\"matInput\", \"\", \"formControlName\", \"project_map_id\", \"required\", \"\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\"], [\"modnmInput\", \"\"], [\"modnm\", \"matAutocomplete\"], [\"type\", \"button\", \"data-bs-toggle\", \"modal\", \"data-bs-target\", \"#createMaster\", 1, \"btn\", \"btn-light\", 2, \"border-radius\", \"10px\", \"margin-left\", \"20px\", \"border-color\", \"#f5c68b\", \"background-color\", \"#f5c68b\", 3, \"click\"], [1, \"fa\", \"fa-plus-circle\"], [2, \"margin-left\", \"20px\", 3, \"click\"], [\"matTooltip\", \"Add\"], [1, \"table-responsive\", 2, \"margin-top\", \"1%\", \"width\", \"100%\"], [\"fixed-header\", \"\", 1, \"table\", \"table-bordered\", 2, \"margin-top\", \"10px\", \"width\", \"90%\"], [1, \"table_header\", 2, \"text-align\", \"left\"], [\"formArrayName\", \"data\", 4, \"ngFor\", \"ngForOf\"], [2, \"margin-bottom\", \"25px\", \"margin-top\", \"30px\", \"margin-left\", \"50px\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", 2, \"border-radius\", \"7px\", \"margin-left\", \"10px\", \"border-color\", \"black\", \"background-color\", \"white\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-light\", 2, \"border-radius\", \"10px\", \"margin-left\", \"10px\", \"border-color\", \"#f5c68b\", \"background-color\", \"#f5c68b\", 3, \"click\"], [\"bdColor\", \"rgba(51, 51, 51, 0.8)\", \"size\", \"default\", \"type\", \"ball-spin-clockwise\", 3, \"fullScreen\"], [2, \"color\", \"white\"], [\"id\", \"createMaster\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"actionpopupTitle\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-xl\", 2, \"margin-left\", \"247px\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"exampleModalLabel\", 1, \"modal-title\"], [\"type\", \"button\", \"data-bs-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\"], [\"multi\", \"\", 1, \"example-headers-align\"], [3, \"expanded\", \"opened\"], [1, \"titlecolor\"], [\"appearance\", \"outline\", 1, \"matformfieldstyle\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"name\", \"autocomplete\", \"off\", 1, \"matformfieldinputstyle\"], [\"matInput\", \"\", \"type\", \"name\", \"formControlName\", \"name\", \"autocomplete\", \"off\", 1, \"matformfieldinputstyle\"], [\"appearance\", \"outline\", 1, \"matformfieldstyle\", 2, \"margin-left\", \"30px\"], [\"matInput\", \"\", \"readonly\", \"\", \"formControlName\", \"start_date\", 1, \"matformfieldinputstyle\", 3, \"matDatepicker\", \"dateChange\"], [\"matSuffix\", \"\", 1, \"maticonsize\", 3, \"for\"], [\"pickerMR\", \"\"], [\"matInput\", \"\", \"readonly\", \"\", \"formControlName\", \"end_date\", 1, \"matformfieldinputstyle\", 3, \"min\", \"matDatepicker\"], [\"pickerMR2\", \"\"], [\"matInput\", \"\", \"formControlName\", \"client_id\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\"], [\"cltmasterInput\", \"\"], [\"cltmaster\", \"matAutocomplete\"], [\"matInput\", \"\", \"formControlName\", \"project_id\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\"], [\"appnmmasterInput\", \"\"], [\"appnmmaster\", \"matAutocomplete\"], [\"matInput\", \"\", \"formControlName\", \"module_id\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\"], [\"modnmmasterInput\", \"\"], [\"modnmmaster\", \"matAutocomplete\"], [1, \"is-loading\"], [3, \"value\", \"focusout\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"focusout\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"formArrayName\", \"data\"], [3, \"formGroupName\"], [\"formControlName\", \"dev_type\", 1, \"matformfieldinputstyle\"], [\"matInput\", \"\", \"readonly\", \"\", \"formControlName\", \"start_date\", 1, \"matformfieldinputstyle\", 3, \"matDatepicker\", \"min\", \"dateChange\"], [\"picker1\", \"\"], [\"picker2\", \"\"], [\"matInput\", \"\", \"formControlName\", \"developer\", \"required\", \"\", 1, \"matformfieldinputstyle\", 3, \"matAutocomplete\"], [\"empInput\", \"\"], [\"emp\", \"matAutocomplete\"], [1, \"lenthoftextfield\", \"matformfieldstyle\"], [\"type\", \"text\", \"placeholder\", \"Task Name...\", \"formControlName\", \"task\", \"matInput\", \"\", \"autocomplete\", \"off\", 1, \"matformfieldinputstyle\", \"heightdesc\"], [\"mat-icon-button\", \"\", \"type\", \"button\"], [\"style\", \"color: black;\", 3, \"click\", 4, \"ngIf\"], [2, \"color\", \"black\", 3, \"click\"]],\n    template: function TaskCreateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"mat-card\", 0)(2, \"div\", 1)(3, \"h2\", 2);\n        i0.ɵɵtext(4, \" Task Creation \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"hr\");\n        i0.ɵɵelementStart(6, \"div\")(7, \"form\", 3)(8, \"table\")(9, \"div\")(10, \"tr\")(11, \"td\")(12, \"mat-label\");\n        i0.ɵɵtext(13, \"Client\");\n        i0.ɵɵelementStart(14, \"label\", 4);\n        i0.ɵɵtext(15, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵelementStart(17, \"mat-form-field\", 5);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_17_listener() {\n          return ctx.client();\n        });\n        i0.ɵɵelementStart(18, \"input\", 6, 7);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_input_click_18_listener() {\n          return ctx.clearproject();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-icon\", 8);\n        i0.ɵɵtext(21, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"mat-autocomplete\", 9, 10);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_22_listener() {\n          return ctx.autocompleteCltScroll();\n        });\n        i0.ɵɵtemplate(24, TaskCreateComponent_mat_option_24_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(25, TaskCreateComponent_ng_container_25_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(26, \"td\")(27, \"mat-label\", 13);\n        i0.ɵɵtext(28, \"Project Name\");\n        i0.ɵɵelementStart(29, \"label\", 4);\n        i0.ɵɵtext(30, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵelementStart(32, \"mat-form-field\", 14);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_32_listener() {\n          return ctx.appName();\n        });\n        i0.ɵɵelementStart(33, \"input\", 15, 16);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_input_click_33_listener() {\n          return ctx.clearmodule();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"mat-icon\", 8);\n        i0.ɵɵtext(36, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"mat-autocomplete\", 9, 17);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_37_listener() {\n          return ctx.autocompleteAppnmScroll();\n        });\n        i0.ɵɵtemplate(39, TaskCreateComponent_mat_option_39_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(40, TaskCreateComponent_ng_container_40_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(41, \"td\")(42, \"mat-label\", 13);\n        i0.ɵɵtext(43, \"Module Name\");\n        i0.ɵɵelementStart(44, \"label\", 4);\n        i0.ɵɵtext(45, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(46, \"br\");\n        i0.ɵɵelementStart(47, \"mat-form-field\", 14);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_47_listener() {\n          return ctx.moduleName();\n        });\n        i0.ɵɵelement(48, \"input\", 18, 19);\n        i0.ɵɵelementStart(50, \"mat-icon\", 8);\n        i0.ɵɵtext(51, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(52, \"mat-autocomplete\", 9, 20);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_52_listener() {\n          return ctx.autocompletemodnmScroll();\n        });\n        i0.ɵɵtemplate(54, TaskCreateComponent_mat_option_54_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(55, TaskCreateComponent_ng_container_55_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(56, \"td\")(57, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_57_listener() {\n          return ctx.master();\n        });\n        i0.ɵɵelement(58, \"i\", 22);\n        i0.ɵɵtext(59, \" Add Master\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(60, \"table\")(61, \"tr\")(62, \"span\", 23);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_span_click_62_listener() {\n          return ctx.addSection();\n        });\n        i0.ɵɵelementStart(63, \"mat-icon\", 24);\n        i0.ɵɵtext(64, \"add_circle_outline\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(65, \"div\", 25)(66, \"table\", 26)(67, \"thead\", 27)(68, \"tr\")(69, \"th\");\n        i0.ɵɵtext(70, \"S.No\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(71, \"th\");\n        i0.ɵɵtext(72, \"Dev Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(73, \"th\");\n        i0.ɵɵtext(74, \"Planned Start Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"th\");\n        i0.ɵɵtext(76, \"Planned End Date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(77, \"th\");\n        i0.ɵɵtext(78, \"Developer\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(79, \"th\");\n        i0.ɵɵtext(80, \"Task\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(81, \"th\");\n        i0.ɵɵtext(82, \"Delete\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(83, TaskCreateComponent_ng_container_83_Template, 61, 14, \"ng-container\", 28);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(84, \"div\", 29)(85, \"button\", 30);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_85_listener() {\n          return ctx.oncancel();\n        });\n        i0.ɵɵtext(86, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(87, \"button\", 31);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_87_listener() {\n          return ctx.submitForm();\n        });\n        i0.ɵɵtext(88, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(89, \"ngx-spinner\", 32)(90, \"p\", 33);\n        i0.ɵɵtext(91, \"Please Wait. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(92, \"div\", 34)(93, \"div\", 35)(94, \"div\", 36)(95, \"div\", 37)(96, \"h2\", 38);\n        i0.ɵɵtext(97, \"Master\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(98, \"button\", 39)(99, \"span\", 40);\n        i0.ɵɵtext(100, \"\\u00D7\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(101, \"div\", 41)(102, \"mat-accordion\", 42)(103, \"mat-expansion-panel\", 43);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_expansion_panel_opened_103_listener() {\n          return ctx.setStep(0);\n        });\n        i0.ɵɵelementStart(104, \"mat-expansion-panel-header\")(105, \"mat-panel-title\", 44)(106, \"mat-icon\");\n        i0.ɵɵtext(107, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(108, \"New Client \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(109, \"form\", 3)(110, \"table\")(111, \"div\")(112, \"tr\")(113, \"td\")(114, \"mat-label\");\n        i0.ɵɵtext(115, \"Client Name \");\n        i0.ɵɵelementStart(116, \"label\", 4);\n        i0.ɵɵtext(117, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(118, \"br\");\n        i0.ɵɵelementStart(119, \"mat-form-field\", 45);\n        i0.ɵɵelement(120, \"input\", 46);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(121, \"button\", 31);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_121_listener() {\n          return ctx.clientSubmit();\n        });\n        i0.ɵɵtext(122, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(123, \"mat-expansion-panel\", 43);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_expansion_panel_opened_123_listener() {\n          return ctx.setStep(1);\n        });\n        i0.ɵɵelementStart(124, \"mat-expansion-panel-header\")(125, \"mat-panel-title\", 44)(126, \"mat-icon\");\n        i0.ɵɵtext(127, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(128, \"New Project \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(129, \"form\", 3)(130, \"table\")(131, \"div\")(132, \"tr\")(133, \"td\")(134, \"mat-label\");\n        i0.ɵɵtext(135, \"Project Name\");\n        i0.ɵɵelementStart(136, \"label\", 4);\n        i0.ɵɵtext(137, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(138, \"br\");\n        i0.ɵɵelementStart(139, \"mat-form-field\", 45);\n        i0.ɵɵelement(140, \"input\", 47);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(141, \"td\")(142, \"mat-label\", 13);\n        i0.ɵɵtext(143, \"Project Start Date\");\n        i0.ɵɵelementStart(144, \"label\", 4);\n        i0.ɵɵtext(145, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(146, \"br\");\n        i0.ɵɵelementStart(147, \"mat-form-field\", 48)(148, \"input\", 49);\n        i0.ɵɵlistener(\"dateChange\", function TaskCreateComponent_Template_input_dateChange_148_listener($event) {\n          return ctx.MasterStartDate($event.value);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(149, \"mat-datepicker-toggle\", 50)(150, \"mat-datepicker\", null, 51);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(152, \"td\")(153, \"mat-label\", 13);\n        i0.ɵɵtext(154, \"Planned End Date \");\n        i0.ɵɵelementStart(155, \"label\", 4);\n        i0.ɵɵtext(156, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(157, \"br\");\n        i0.ɵɵelementStart(158, \"mat-form-field\", 48);\n        i0.ɵɵelement(159, \"input\", 52)(160, \"mat-datepicker-toggle\", 50)(161, \"mat-datepicker\", null, 53);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(163, \"button\", 31);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_163_listener() {\n          return ctx.projectSubmit();\n        });\n        i0.ɵɵtext(164, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(165, \"mat-expansion-panel\", 43);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_expansion_panel_opened_165_listener() {\n          return ctx.setStep(2);\n        });\n        i0.ɵɵelementStart(166, \"mat-expansion-panel-header\")(167, \"mat-panel-title\", 44)(168, \"mat-icon\");\n        i0.ɵɵtext(169, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(170, \"New Module \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(171, \"form\", 3)(172, \"table\")(173, \"div\")(174, \"tr\")(175, \"td\")(176, \"mat-label\");\n        i0.ɵɵtext(177, \"Module Name \");\n        i0.ɵɵelementStart(178, \"label\", 4);\n        i0.ɵɵtext(179, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(180, \"br\");\n        i0.ɵɵelementStart(181, \"mat-form-field\", 45);\n        i0.ɵɵelement(182, \"input\", 47);\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(183, \"button\", 31);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_183_listener() {\n          return ctx.moduleSubmit();\n        });\n        i0.ɵɵtext(184, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(185, \"mat-expansion-panel\", 43);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_expansion_panel_opened_185_listener() {\n          return ctx.setStep(3);\n        });\n        i0.ɵɵelementStart(186, \"mat-expansion-panel-header\")(187, \"mat-panel-title\", 44)(188, \"mat-icon\");\n        i0.ɵɵtext(189, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(190, \"New Mapping \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(191, \"form\", 3)(192, \"table\")(193, \"div\")(194, \"tr\")(195, \"td\")(196, \"mat-label\");\n        i0.ɵɵtext(197, \"Client\");\n        i0.ɵɵelementStart(198, \"label\", 4);\n        i0.ɵɵtext(199, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(200, \"br\");\n        i0.ɵɵelementStart(201, \"mat-form-field\", 5);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_201_listener() {\n          return ctx.clientmaster();\n        });\n        i0.ɵɵelement(202, \"input\", 54, 55);\n        i0.ɵɵelementStart(204, \"mat-icon\", 8);\n        i0.ɵɵtext(205, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(206, \"mat-autocomplete\", 9, 56);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_206_listener() {\n          return ctx.autocompleteCltmasterScroll();\n        });\n        i0.ɵɵtemplate(208, TaskCreateComponent_mat_option_208_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(209, TaskCreateComponent_ng_container_209_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(210, \"td\")(211, \"mat-label\", 13);\n        i0.ɵɵtext(212, \"Project Name\");\n        i0.ɵɵelementStart(213, \"label\", 4);\n        i0.ɵɵtext(214, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(215, \"br\");\n        i0.ɵɵelementStart(216, \"mat-form-field\", 14);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_216_listener() {\n          return ctx.projectnamemaster();\n        });\n        i0.ɵɵelement(217, \"input\", 57, 58);\n        i0.ɵɵelementStart(219, \"mat-icon\", 8);\n        i0.ɵɵtext(220, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(221, \"mat-autocomplete\", 9, 59);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_221_listener() {\n          return ctx.autocompleteAppnmmasterScroll();\n        });\n        i0.ɵɵtemplate(223, TaskCreateComponent_mat_option_223_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(224, TaskCreateComponent_ng_container_224_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(225, \"td\")(226, \"mat-label\", 13);\n        i0.ɵɵtext(227, \"Module Name\");\n        i0.ɵɵelementStart(228, \"label\", 4);\n        i0.ɵɵtext(229, \"*\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(230, \"br\");\n        i0.ɵɵelementStart(231, \"mat-form-field\", 14);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_mat_form_field_click_231_listener() {\n          return ctx.modulenamemaster();\n        });\n        i0.ɵɵelement(232, \"input\", 60, 61);\n        i0.ɵɵelementStart(234, \"mat-icon\", 8);\n        i0.ɵɵtext(235, \"unfold_more\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(236, \"mat-autocomplete\", 9, 62);\n        i0.ɵɵlistener(\"opened\", function TaskCreateComponent_Template_mat_autocomplete_opened_236_listener() {\n          return ctx.autocompletemodnmmasterScroll();\n        });\n        i0.ɵɵtemplate(238, TaskCreateComponent_mat_option_238_Template, 2, 0, \"mat-option\", 11);\n        i0.ɵɵtemplate(239, TaskCreateComponent_ng_container_239_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(240, \"button\", 31);\n        i0.ɵɵlistener(\"click\", function TaskCreateComponent_Template_button_click_240_listener() {\n          return ctx.mappingSubmit();\n        });\n        i0.ɵɵtext(241, \"Submit\");\n        i0.ɵɵelementEnd()()()()()()()();\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(23);\n        const _r5 = i0.ɵɵreference(38);\n        const _r9 = i0.ɵɵreference(53);\n        const _r13 = i0.ɵɵreference(151);\n        const _r14 = i0.ɵɵreference(162);\n        const _r16 = i0.ɵɵreference(207);\n        const _r20 = i0.ɵɵreference(222);\n        const _r24 = i0.ɵɵreference(237);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.taskAddForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"matAutocomplete\", _r1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFnclt);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matAutocomplete\", _r5);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFnappnm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matAutocomplete\", _r9);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFnmodnm);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        i0.ɵɵadvance(28);\n        i0.ɵɵproperty(\"ngForOf\", ctx.getSections(ctx.taskAddForm));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullScreen\", true);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"expanded\", ctx.step === 0);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.clientForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"expanded\", ctx.step === 1);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.projectForm);\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"matDatepicker\", _r13);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r13);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"min\", ctx.set_masterStartDate)(\"matDatepicker\", _r14);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r14);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"expanded\", ctx.step === 2);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.moduleForm);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"expanded\", ctx.step === 3);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.mappingForm);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"matAutocomplete\", _r16);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFncltmaster);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matAutocomplete\", _r20);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFnappnmmaster);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"matAutocomplete\", _r24);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"displayWith\", ctx.displayFnmodnmmaster);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n      }\n    },\n    dependencies: [i6.NgForOf, i6.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i1.FormGroupName, i1.FormArrayName, i10.MatIconButton, i11.MatCard, i12.MatIcon, i13.MatTooltip, i14.MatInput, i15.MatFormField, i15.MatLabel, i15.MatSuffix, i16.MatSelect, i17.MatOption, i18.MatAutocomplete, i18.MatAutocompleteTrigger, i19.MatDatepicker, i19.MatDatepickerInput, i19.MatDatepickerToggle, i20.MatAccordion, i20.MatExpansionPanel, i20.MatExpansionPanelHeader, i20.MatExpansionPanelTitle, i3.NgxSpinnerComponent],\n    styles: [\".container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  position: absolute;\\n  opacity: 0;\\n  cursor: pointer;\\n}\\n\\n\\n\\n.checkmark[_ngcontent-%COMP%] {\\n  position: absolute;\\n  top: 15;\\n  left: 5;\\n  height: 25px;\\n  width: 25px;\\n  background-color: #eee;\\n}\\n\\n\\n\\n.container[_ngcontent-%COMP%]:hover   input[_ngcontent-%COMP%]    ~ .checkmark[_ngcontent-%COMP%] {\\n  background-color: #ccc;\\n}\\n\\n\\n\\n.container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:checked    ~ .checkmark[_ngcontent-%COMP%] {\\n  background-color: #2196F3;\\n}\\n\\n\\n\\n.checkmark[_ngcontent-%COMP%]:after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  display: none;\\n}\\n\\n\\n\\n.container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:checked    ~ .checkmark[_ngcontent-%COMP%]:after {\\n  display: block;\\n}\\n\\n\\n\\n.container[_ngcontent-%COMP%]   .checkmark[_ngcontent-%COMP%]:after {\\n  left: 9px;\\n  top: 5px;\\n  width: 5px;\\n  height: 10px;\\n  border: solid white;\\n  border-width: 0 3px 3px 0;\\n  transform: rotate(45deg);\\n}\\n\\nspan.checkmark[_ngcontent-%COMP%] {\\n  margin-left: 1%;\\n}\\n\\n.styled-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   td[_ngcontent-%COMP%] {\\n  padding: 0.5em 0.1em 0.1em;\\n  border: 1px solid #dddddd;\\n  border-right: hidden;\\n}\\n\\n#commonstyle[_ngcontent-%COMP%] {\\n  border: 15px none #f6f6f6;\\n}\\n\\n#commonstyle[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(even) {\\n  background: #EDF8FA;\\n}\\n\\n#commonstyle[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-child(odd) {\\n  background: #FFF;\\n}\\n\\n.styled-table[_ngcontent-%COMP%] {\\n  margin: 25px 0;\\n  font-family: \\\"Montserrat\\\";\\n  width: 100%;\\n}\\n\\n.styled-table[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:nth-of-type(even) {\\n  background-color: #F3FAFF;\\n}\\n\\n.maticonsize[_ngcontent-%COMP%] {\\n  font-size: 15px;\\n}\\n\\n.check[_ngcontent-%COMP%] {\\n  cursor: pointer;\\n  position: absolute;\\n  width: 20px;\\n  height: 20px;\\n  top: 0;\\n  border-radius: 10px;\\n}\\n\\n.mat-option[_ngcontent-%COMP%]:hover {\\n  background: #EDF8FA !important;\\n}\\n\\n.mat-option.mat-active[_ngcontent-%COMP%] {\\n  background: #EDF8FA !important;\\n}\\n\\n.round[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n\\n.round[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  background-color: #fff;\\n  border: 1px solid #ccc;\\n  border-radius: 50%;\\n  cursor: pointer;\\n  height: 28px;\\n  left: 0;\\n  position: absolute;\\n  top: 0;\\n  width: 28px;\\n}\\n\\n.round[_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after {\\n  border: 2px solid #fff;\\n  border-top: none;\\n  border-right: none;\\n  content: \\\"\\\";\\n  height: 6px;\\n  left: 7px;\\n  opacity: 0;\\n  position: absolute;\\n  top: 8px;\\n  transform: rotate(-45deg);\\n  width: 12px;\\n}\\n\\n.round[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%] {\\n  visibility: hidden;\\n}\\n\\n.round[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked    + label[_ngcontent-%COMP%] {\\n  background-color: #21cbe5;\\n  border-color: #21cbe5;\\n}\\n\\n.round[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]:checked    + label[_ngcontent-%COMP%]:after {\\n  opacity: 1;\\n}\\n\\nlabel[_ngcontent-%COMP%] {\\n  margin-bottom: 0px;\\n}\\n\\n.header[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n  font-family: \\\"Montserrat\\\";\\n}\\n\\n.heightdesc[_ngcontent-%COMP%] {\\n  height: 100px;\\n}\\n\\n.lenthoftextfield[_ngcontent-%COMP%] {\\n  width: 870px;\\n}\\n\\n.example-headers-align[_ngcontent-%COMP%]   .mat-expansion-panel-header-description[_ngcontent-%COMP%] {\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n.example-headers-align[_ngcontent-%COMP%]   .mat-mdc-form-field[_ngcontent-%COMP%]    + .mat-mdc-form-field[_ngcontent-%COMP%] {\\n  margin-left: 8px;\\n}\\n\\n.titlecolor[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n\\n.btncolor[_ngcontent-%COMP%] {\\n  background-color: #e0e0e0;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"]\n  });\n}\nclass task {\n  app_id;\n  client;\n  type;\n  module_id;\n  unit_head;\n  team_lead;\n  employee_arr;\n  task;\n  start_date;\n  end_date;\n}\nclass taskmaster {\n  client_id;\n  project_id;\n  module_id;\n}","map":{"version":3,"names":["EventEmitter","FormGroup","FormControl","Validators","FormArray","fromEvent","NativeDateAdapter","DateAdapter","MAT_DATE_FORMATS","formatDate","DatePipe","debounceTime","distinctUntilChanged","tap","switchMap","finalize","takeUntil","map","MatAutocompleteTrigger","COMMA","ENTER","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","TaskCreateComponent_ng_container_25_mat_option_1_Template_mat_option_focusout_0_listener","restoredCtx","ɵɵrestoreView","_r30","clt_r28","$implicit","ctx_r29","ɵɵnextContext","ɵɵresetView","FocusOut_select_client","ɵɵproperty","ɵɵadvance","ɵɵtextInterpolate1","name","ɵɵelementContainerStart","ɵɵtemplate","TaskCreateComponent_ng_container_25_mat_option_1_Template","ɵɵelementContainerEnd","ctx_r3","clientList","TaskCreateComponent_ng_container_40_mat_option_1_Template_mat_option_focusout_0_listener","_r34","appnm_r32","ctx_r33","FocusOut_select_project","TaskCreateComponent_ng_container_40_mat_option_1_Template","ctx_r7","appNameList","modnm_r36","TaskCreateComponent_ng_container_55_mat_option_1_Template","ctx_r11","moduleNameList","devtype_r47","id","text","dev_r49","TaskCreateComponent_ng_container_83_ng_container_49_mat_option_1_Template","ctx_r45","developerList","TaskCreateComponent_ng_container_83_mat_icon_60_Template_mat_icon_click_0_listener","_r52","i_r38","index","ctx_r50","removeSection","ɵɵelement","TaskCreateComponent_ng_container_83_mat_option_12_Template","TaskCreateComponent_ng_container_83_Template_input_dateChange_20_listener","$event","_r54","ctx_r53","StartDate","value","TaskCreateComponent_ng_container_83_Template_mat_form_field_click_41_listener","ctx_r55","developer","TaskCreateComponent_ng_container_83_Template_mat_autocomplete_opened_46_listener","ctx_r56","autocompletedevScroll","TaskCreateComponent_ng_container_83_mat_option_48_Template","TaskCreateComponent_ng_container_83_ng_container_49_Template","TaskCreateComponent_ng_container_83_mat_icon_60_Template","ɵɵtextInterpolate","ctx_r12","devtypelist","_r40","set_Threedays_ago","set_StartDate","_r41","_r43","displayFndev","isLoading","taskAddForm","get","length","TaskCreateComponent_ng_container_209_mat_option_1_Template_mat_option_focusout_0_listener","_r60","clt_r58","ctx_r59","FocusOut_select_clientmaster","TaskCreateComponent_ng_container_209_mat_option_1_Template","ctx_r18","clientmasterList","TaskCreateComponent_ng_container_224_mat_option_1_Template_mat_option_focusout_0_listener","_r64","appnm_r62","ctx_r63","FocusOut_select_projectmaster","TaskCreateComponent_ng_container_224_mat_option_1_Template","ctx_r22","appNamemasterList","modnm_r66","TaskCreateComponent_ng_container_239_mat_option_1_Template","ctx_r26","moduleNamemasterList","PICK_FORMATS","parse","dateInput","month","year","day","display","monthYearLabel","dateA11yLabel","monthYearA11yLabel","PickDateAdapter","format","date","displayFormat","locale","toDateString","TaskCreateComponent","formBuilder","errorHandler","SpinnerService","notification","toastr","datePipe","router","taskservice","taskShare","clientForm","projectForm","moduleForm","mappingForm","has_next","has_previous","currentpage","hasnextdevname","haspreviousdevname","currentpagedevname","unitheadList","teamldList","empList","chipSelectedemp","chipSelectedempid","employee_arr","task_Id","matAutocomplete","autocompleteTrigger","appnmInput","matclientAutocomplete","cltInput","matmodulenameAutocomplete","modnmInput","matunitheadAutocomplete","unitHDInput","matteamleadAutocomplete","teamldInput","matempAutocomplete","empInput","separatorKeysCodes","onCancel","onSubmit","matclientmasterAutocomplete","cltmasterInput","maprotmasterAutocomplete","appnmmasterInput","matmodulenamemasterAutocomplete","modnmmasterInput","constructor","ngOnInit","d","Date","console","log","setDate","getDate","group","app_id","required","client","project_map_id","data","start_date","end_date","client_id","project_id","module_id","getdevtype","getTask","push","getdetails","dev_type","task","addSection","control","i","removeAt","getSections","forms","controls","step","setStep","master","subscribe","results","datas","error","handleError","hide","appName","appkeyvalue","getappName","valueChanges","pipe","getappNameFilter","client_Id","displayFnappnm","appnm","undefined","cltkeyvalue","getclt","getcltFilter","displayFnclt","clt","moduleName","modkeyvalue","getModuleName","getmodulenameFilter","project_Id","displayFnmodnm","mod","unitHead","unithdkeyvalue","getUnitHead","getUnitHeadFilter","displayFnunitHD","unithd","TeamLead","teamldkeyvalue","getTeamLead","getTeamLeadFilter","displayFnteamld","teamld","devkeyvalue","getDeveloper","at","getdeveloperFilter","emp","setTimeout","panel","nativeElement","x","scrollTop","panelClosingActions","scrollHeight","elementHeight","clientHeight","atBottom","datapagination","concat","clientmaster","getclientmaster","getclientmasterFilter","displayFncltmaster","cltmaster","client_master_Id","clearproject","reset","clearmodule","projectnamemaster","getprojectnamemaster","getprojectnamemasterFilter","displayFnappnmmaster","promaster","project_master_Id","modulenamemaster","getmodulenamemaster","getmodulenamemasterFilter","displayFnmodnmmaster","modmaster","submitForm","show","details","showError","mapping_id","transform","taskCreateForm","res","message","showSuccess","emit","description","autocompleteAppnmScroll","autocompleteCltScroll","autocompletemodnmScroll","autocompleteuntheadScroll","autocompleteteteamldScroll","autocompleteCltmasterScroll","autocompleteAppnmmasterScroll","autocompletemodnmmasterScroll","getemp","keyvalue","type","employeesearch","removedemp","indexOf","splice","empSelected","event","option","selectempByName","foundemp1","filter","e","foundemp","autocompleteempScroll","getFullYear","getMonth","developer_List","getTaskEdit","gettaskview","result","dev_arr","startdate","enddate","patchValue","unit_head","team_lead","task_status","clientSubmit","projectSubmit","dateValue","moduleSubmit","mappingSubmit","createFormatemapping","taskmasterclass","taskmaster","set_masterStartDate","MasterStartDate","oncancel","Documentfilearray","onFileSelected","target","files","deleteInlineFile","fileindex","filedata","ɵɵdirectiveInject","i1","FormBuilder","i2","ErrorHandlingService","i3","NgxSpinnerService","i4","NotificationService","i5","ToastrService","i6","i7","Router","i8","TaskService","i9","ShareService","selectors","viewQuery","TaskCreateComponent_Query","rf","ctx","provide","useClass","useValue","decls","vars","consts","template","TaskCreateComponent_Template","TaskCreateComponent_Template_mat_form_field_click_17_listener","TaskCreateComponent_Template_input_click_18_listener","TaskCreateComponent_Template_mat_autocomplete_opened_22_listener","TaskCreateComponent_mat_option_24_Template","TaskCreateComponent_ng_container_25_Template","TaskCreateComponent_Template_mat_form_field_click_32_listener","TaskCreateComponent_Template_input_click_33_listener","TaskCreateComponent_Template_mat_autocomplete_opened_37_listener","TaskCreateComponent_mat_option_39_Template","TaskCreateComponent_ng_container_40_Template","TaskCreateComponent_Template_mat_form_field_click_47_listener","TaskCreateComponent_Template_mat_autocomplete_opened_52_listener","TaskCreateComponent_mat_option_54_Template","TaskCreateComponent_ng_container_55_Template","TaskCreateComponent_Template_button_click_57_listener","TaskCreateComponent_Template_span_click_62_listener","TaskCreateComponent_ng_container_83_Template","TaskCreateComponent_Template_button_click_85_listener","TaskCreateComponent_Template_button_click_87_listener","TaskCreateComponent_Template_mat_expansion_panel_opened_103_listener","TaskCreateComponent_Template_button_click_121_listener","TaskCreateComponent_Template_mat_expansion_panel_opened_123_listener","TaskCreateComponent_Template_input_dateChange_148_listener","TaskCreateComponent_Template_button_click_163_listener","TaskCreateComponent_Template_mat_expansion_panel_opened_165_listener","TaskCreateComponent_Template_button_click_183_listener","TaskCreateComponent_Template_mat_expansion_panel_opened_185_listener","TaskCreateComponent_Template_mat_form_field_click_201_listener","TaskCreateComponent_Template_mat_autocomplete_opened_206_listener","TaskCreateComponent_mat_option_208_Template","TaskCreateComponent_ng_container_209_Template","TaskCreateComponent_Template_mat_form_field_click_216_listener","TaskCreateComponent_Template_mat_autocomplete_opened_221_listener","TaskCreateComponent_mat_option_223_Template","TaskCreateComponent_ng_container_224_Template","TaskCreateComponent_Template_mat_form_field_click_231_listener","TaskCreateComponent_Template_mat_autocomplete_opened_236_listener","TaskCreateComponent_mat_option_238_Template","TaskCreateComponent_ng_container_239_Template","TaskCreateComponent_Template_button_click_240_listener","_r1","_r5","_r9","_r13","_r14","_r16","_r20","_r24"],"sources":["D:\\MyWORKSPACE\\Angular16\\wisefin-ui\\wisefin-ui\\src\\app\\taskreport\\task-create\\task-create.component.ts","D:\\MyWORKSPACE\\Angular16\\wisefin-ui\\wisefin-ui\\src\\app\\taskreport\\task-create\\task-create.component.html"],"sourcesContent":["import { Component, OnInit,ViewChild , Output, EventEmitter} from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControl } from '@angular/forms';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { Validators, FormArray } from '@angular/forms';\r\nimport { Observable, from, fromEvent, } from 'rxjs';\r\nimport { Router } from '@angular/router'\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NativeDateAdapter, DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\r\nimport { formatDate, DatePipe } from '@angular/common';\r\nimport { debounceTime, distinctUntilChanged, tap, filter, switchMap, finalize, takeUntil, map } from 'rxjs/operators';\r\nimport { MatAutocompleteSelectedEvent,MatAutocomplete, MatAutocompleteTrigger } from '@angular/material/autocomplete';\r\nimport { NgxSpinnerService } from \"ngx-spinner\";\r\nimport { ErrorHandlingService } from '../error-handling.service';\r\nimport { NotificationService } from '../notification.service';\r\nimport { TaskService } from '../task.service';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { ShareService } from '../share.service';\r\n\r\nexport interface appName {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface Client {\r\n  id: string;\r\n  name: string;\r\n}\r\n// export interface ModeuleName {\r\n//   id: string;\r\n//   name: string;\r\n// }\r\nexport interface unitHead {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface teamLead {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport interface emplistss {\r\n  id: string;\r\n  name: any;\r\n  full_name: any\r\n}\r\n\r\nexport interface appName {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface Client {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface ModeuleName {\r\n  id: string;\r\n  name: string;\r\n  mapping_id: number;\r\n}\r\n\r\nexport interface appNamemaster {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface Clientmaster {\r\n  id: string;\r\n  name: string;\r\n}\r\nexport interface ModeuleNamemaster {\r\n  module_id: string;\r\n  name: string;\r\n}\r\nexport interface developer {\r\n  id: string;\r\n  name: string;\r\n}\r\n\r\nexport const PICK_FORMATS = {\r\n  parse: { dateInput: { month: 'short', year: 'numeric', day: 'numeric' } },\r\n  display: {\r\n    dateInput: 'input',\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' }\r\n  }\r\n}\r\nclass PickDateAdapter extends NativeDateAdapter {\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (displayFormat === 'input') {\r\n      return formatDate(date, 'dd-MMM-yyyy', this.locale);\r\n    } else {\r\n      return date.toDateString();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-task-create',\r\n  templateUrl: './task-create.component.html',\r\n  styleUrls: ['./task-create.component.scss'],\r\n  providers: [\r\n    { provide: DateAdapter, useClass: PickDateAdapter },\r\n    { provide: MAT_DATE_FORMATS, useValue: PICK_FORMATS },\r\n    DatePipe\r\n  ]\r\n})\r\nexport class TaskCreateComponent implements OnInit {\r\n  taskAddForm:FormGroup;\r\n  clientForm:FormGroup;\r\n  projectForm:FormGroup;\r\n  moduleForm:FormGroup;\r\n  mappingForm:FormGroup;\r\n  isLoading = false;\r\n  devtypelist:any;\r\n  has_next = true;\r\n  has_previous = true;\r\n  currentpage: number = 1;\r\n  // setdate = new Date()\r\n\r\n  hasnextdevname = true;\r\n  haspreviousdevname = true;\r\n  currentpagedevname: number = 1;\r\n\r\n  appNameList: Array<appName>;\r\n  clientList: Array<Client>;\r\n  moduleNameList: Array<ModeuleName>;\r\n  unitheadList: Array<unitHead>;\r\n  developerList: Array<developer>;\r\n  teamldList: Array<teamLead>;\r\n\r\n  empList: emplistss[];\r\n  public chipSelectedemp: emplistss[] = [];\r\n  public chipSelectedempid = [];\r\n  employee_arr = new FormControl();\r\n  task_Id:any;\r\n\r\n  set_Threedays_ago:any\r\n \r\n\r\n  appNamemasterList: Array<appNamemaster>;\r\n  clientmasterList: Array<Clientmaster>;\r\n  moduleNamemasterList: Array<ModeuleNamemaster>;\r\n\r\n\r\n  @ViewChild('appnm') matAutocomplete: MatAutocomplete;\r\n  @ViewChild(MatAutocompleteTrigger) autocompleteTrigger: MatAutocompleteTrigger;\r\n  @ViewChild('appnmInput') appnmInput: any;\r\n\r\n  @ViewChild('clt') matclientAutocomplete: MatAutocomplete;\r\n  @ViewChild('cltInput') cltInput: any;\r\n  \r\n  @ViewChild('modnm') matmodulenameAutocomplete: MatAutocomplete;\r\n  @ViewChild('modnmInput') modnmInput: any;\r\n  \r\n  @ViewChild('unitHD') matunitheadAutocomplete: MatAutocomplete;\r\n  @ViewChild('unitHDInput') unitHDInput: any;\r\n  \r\n  @ViewChild('teamld') matteamleadAutocomplete: MatAutocomplete;\r\n  @ViewChild('teamldInput') teamldInput: any;\r\n\r\n  // developer name \r\n  @ViewChild('emp') matempAutocomplete: MatAutocomplete;\r\n  @ViewChild('empInput') empInput: any;\r\n  readonly separatorKeysCodes: number[] = [ENTER, COMMA];\r\n\r\n  @Output() onCancel = new EventEmitter<any>();\r\n  @Output() onSubmit = new EventEmitter<any>();\r\n  // master\r\n  @ViewChild('cltmaster') matclientmasterAutocomplete: MatAutocomplete;\r\n  @ViewChild('cltmasterInput') cltmasterInput: any;\r\n\r\n  @ViewChild('appnmmaster') maprotmasterAutocomplete: MatAutocomplete;\r\n  @ViewChild('appnmmasterInput') appnmmasterInput: any;\r\n\r\n  @ViewChild('modnmmaster') matmodulenamemasterAutocomplete: MatAutocomplete;\r\n  @ViewChild('modnmmasterInput') modnmmasterInput: any;\r\n  \r\n\r\n  constructor(private formBuilder: FormBuilder,\r\n    private errorHandler: ErrorHandlingService,private SpinnerService: NgxSpinnerService,\r\n    private notification: NotificationService, private toastr: ToastrService, private datePipe: DatePipe,\r\n    private router: Router,private taskservice:TaskService, private taskShare: ShareService)\r\n    { }\r\n\r\n  ngOnInit(): void {\r\n    let d = new Date();\r\n    console.log('Today is: ' + d);\r\n    d.setDate(d.getDate() - 3);\r\n    console.log('3 days ago was: ' + d);\r\n    this.set_Threedays_ago = d;\r\n    \r\n    this.taskAddForm = this.formBuilder.group({\r\n      app_id: ['', Validators.required],\r\n      client: ['', Validators.required],\r\n      // type: ['', Validators.required],\r\n      project_map_id : ['', Validators.required],\r\n      // unit_head: ['', Validators.required],\r\n      // team_lead: ['', Validators.required],\r\n      // employee_arr: ['', Validators.required],\r\n      // task: ['', Validators.required],\r\n      // start_date: [''],\r\n      // end_date: [''],\r\n      // data: new FormArray([\r\n      //   this.dataForTask \r\n      // ])\r\n      data: new FormArray([\r\n        \r\n      ]),\r\n    \r\n    })\r\n    // client form\r\n    this.clientForm = this.formBuilder.group({\r\n      name: [''],\r\n    })\r\n    // project form\r\n    this.projectForm = this.formBuilder.group({\r\n      name: [''],\r\n      start_date:[''],\r\n      end_date:[''],\r\n    })\r\n     // module form\r\n     this.moduleForm = this.formBuilder.group({\r\n      name: [''],\r\n     \r\n    })\r\n\r\n    // mapping form\r\n    this.mappingForm = this.formBuilder.group({\r\n      client_id: [''],\r\n      project_id: [''],\r\n      module_id: [''],\r\n    })\r\n    \r\n    \r\n    this.getdevtype();\r\n    this.getTask();\r\n    // /this.ggg();\r\n   \r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  // get dataForTask(): FormGroup {\r\n  //   let FormGroupArray = this.formBuilder.group({\r\n  //     type: '',\r\n  //     start_date: '',\r\n  //     end_date: '',\r\n  //     developer: '',\r\n  //     task: ''\r\n  //   })\r\n  //   return FormGroupArray\r\n  // }\r\n\r\n  // AddTask(){\r\n  //   let control = this.taskAddForm.get(\"data\") as FormArray;\r\n  //   control.push(this.dataForTask)\r\n  // }\r\n\r\n  getTask() {\r\n    // if (this.editappraisal) {\r\n    //   // this.vowecfservice.getedit(this.editappraisal)\r\n    //   //   .subscribe(results => {\r\n     \r\n    //   //       this.getappraisallist(results)\r\n          \r\n  \r\n    //   //   })\r\n    // }\r\n    // else {\r\n      (<FormArray>this.taskAddForm.get('data')).push(this.getdetails())\r\n    // }\r\n  \r\n  }\r\n\r\n  getdetails() {\r\n    let group = new FormGroup({\r\n      dev_type: new FormControl(''),\r\n      start_date: new FormControl(''),\r\n      end_date: new FormControl(''),\r\n      developer: new FormControl(''),\r\n      task: new FormControl('')\r\n    })\r\n  \r\n  \r\n    return group\r\n  }\r\n\r\n\r\n  \r\naddSection() {\r\n  const control = <FormArray>this.taskAddForm.get('data');\r\n  control.push(this.getdetails());\r\n\r\n}\r\n\r\nremoveSection(i) {\r\n  const control = <FormArray>this.taskAddForm.get('data');\r\n  control.removeAt(i);\r\n\r\n}\r\n\r\ngetSections(forms) {\r\n  return forms.controls.data.controls;\r\n}\r\n\r\n\r\n  step = 0;\r\n\r\n  setStep(index: number) {\r\n    this.step = index;\r\n  }\r\n\r\n\r\n  master(){\r\n    // client form\r\n    this.clientForm = this.formBuilder.group({\r\n      name: [''],\r\n    })\r\n    // project form\r\n    this.projectForm = this.formBuilder.group({\r\n      name: [''],\r\n      start_date:[''],\r\n      end_date:[''],\r\n    })\r\n     // module form\r\n     this.moduleForm = this.formBuilder.group({\r\n      name: [''],\r\n     \r\n    })\r\n\r\n    // mapping form\r\n    this.mappingForm = this.formBuilder.group({\r\n      client_id: [''],\r\n      project_id: [''],\r\n      module_id: [''],\r\n    })\r\n  }\r\n\r\n  getdevtype() {\r\n    this.taskservice.getdevtype()\r\n      .subscribe((results: any[]) => {\r\n        let datas = results[\"data\"];\r\n        this.devtypelist = datas;\r\n      }, (error) => {\r\n        this.errorHandler.handleError(error);\r\n        this.SpinnerService.hide();\r\n      })\r\n  }\r\n\r\n// app name\r\n  appName(){\r\n    let appkeyvalue: String = \"\";\r\n      this.getappName(appkeyvalue);\r\n  \r\n      this.taskAddForm.get('app_id').valueChanges\r\n        .pipe(\r\n          debounceTime(100),\r\n          distinctUntilChanged(),\r\n          tap(() => {\r\n            this.isLoading = true;\r\n            console.log('inside tap')\r\n  \r\n          }),\r\n          switchMap(value => this.taskservice.getappNameFilter(this.client_Id,value,1)\r\n            .pipe(\r\n              finalize(() => {\r\n                this.isLoading = false\r\n              }),\r\n            )\r\n          )\r\n        )\r\n        .subscribe((results: any[]) => {\r\n          let datas = results[\"data\"];\r\n          this.appNameList = datas;\r\n  \r\n        })\r\n  \r\n  }\r\n\r\n      private getappName(appkeyvalue) {\r\n        this.taskservice.getappNameFilter(this.client_Id,appkeyvalue,1)\r\n          .subscribe((results: any[]) => {\r\n            let datas = results[\"data\"];\r\n            this.appNameList = datas;\r\n          })\r\n      }\r\n\r\n      public displayFnappnm(appnm?: appName): string | undefined {\r\n        return appnm ? appnm.name : undefined;\r\n      }\r\n    \r\n      get appnm() {\r\n        return this.taskAddForm.value.get('app_id');\r\n      }\r\n\r\n\r\n// client\r\n      client(){\r\n        let cltkeyvalue: String = \"\";\r\n          this.getclt(cltkeyvalue);\r\n      \r\n          this.taskAddForm.get('client').valueChanges\r\n            .pipe(\r\n              debounceTime(100),\r\n              distinctUntilChanged(),\r\n              tap(() => {\r\n                this.isLoading = true;\r\n                console.log('inside tap')\r\n      \r\n              }),\r\n              switchMap(value => this.taskservice.getcltFilter(value,1)\r\n                .pipe(\r\n                  finalize(() => {\r\n                    this.isLoading = false\r\n                  }),\r\n                )\r\n              )\r\n            )\r\n            .subscribe((results: any[]) => {\r\n              let datas = results[\"data\"];\r\n              this.clientList = datas;\r\n      \r\n            })\r\n      \r\n      }\r\n    \r\n          private getclt(cltkeyvalue) {\r\n            this.taskservice.getcltFilter(cltkeyvalue,1)\r\n              .subscribe((results: any[]) => {\r\n                let datas = results[\"data\"];\r\n                this.clientList = datas;\r\n              })\r\n          }\r\n    \r\n          public displayFnclt(clt?: Client): string | undefined {\r\n            return clt ? clt.name : undefined;\r\n          }\r\n        \r\n          get clt() {\r\n            return this.taskAddForm.value.get('client');\r\n          }\r\n\r\n// module name\r\nmoduleName(){\r\n            let modkeyvalue: String = \"\";\r\n              this.getModuleName(modkeyvalue);\r\n          \r\n              this.taskAddForm.get('project_map_id').valueChanges\r\n                .pipe(\r\n                  debounceTime(100),\r\n                  distinctUntilChanged(),\r\n                  tap(() => {\r\n                    this.isLoading = true;\r\n                    console.log('inside tap')\r\n          \r\n                  }),\r\n                  switchMap(value => this.taskservice.getmodulenameFilter(this.client_Id,this.project_Id,value,1)\r\n                    .pipe(\r\n                      finalize(() => {\r\n                        this.isLoading = false\r\n                      }),\r\n                    )\r\n                  )\r\n                )\r\n                .subscribe((results: any[]) => {\r\n                  let datas = results[\"data\"];\r\n                  this.moduleNameList = datas;\r\n          \r\n                })\r\n          \r\n          }\r\n        \r\n            private getModuleName(modkeyvalue) {\r\n                this.taskservice.getmodulenameFilter(this.client_Id,this.project_Id,modkeyvalue,1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    this.moduleNameList = datas;\r\n                  })\r\n              }\r\n        \r\n              public displayFnmodnm(mod?: ModeuleName): string | undefined {\r\n                return mod ? mod.name : undefined;\r\n              }\r\n            \r\n              get mod() {\r\n                return this.taskAddForm.value.get('module_id');\r\n              }\r\n\r\n\r\n// unit head\r\nunitHead(){\r\n  let unithdkeyvalue: String = \"\";\r\n    this.getUnitHead(unithdkeyvalue);\r\n\r\n    this.taskAddForm.get('unit_head').valueChanges\r\n      .pipe(\r\n        debounceTime(100),\r\n        distinctUntilChanged(),\r\n        tap(() => {\r\n          this.isLoading = true;\r\n          console.log('inside tap')\r\n\r\n        }),\r\n        switchMap(value => this.taskservice.getUnitHeadFilter(value,1)\r\n          .pipe(\r\n            finalize(() => {\r\n              this.isLoading = false\r\n            }),\r\n          )\r\n        )\r\n      )\r\n      .subscribe((results: any[]) => {\r\n        let datas = results[\"data\"];\r\n        this.unitheadList = datas;\r\n\r\n      })\r\n\r\n}\r\n\r\n  private getUnitHead(unithdkeyvalue) {\r\n      this.taskservice.getUnitHeadFilter(unithdkeyvalue,1)\r\n        .subscribe((results: any[]) => {\r\n          let datas = results[\"data\"];\r\n          this.unitheadList = datas;\r\n        })\r\n    }\r\n\r\n    public displayFnunitHD(unithd?: unitHead): string | undefined {\r\n      return unithd ? unithd.name : undefined;\r\n    }\r\n  \r\n    get unithd() {\r\n      return this.taskAddForm.value.get('unit_head');\r\n    }\r\n\r\n\r\n// Team lead\r\nTeamLead(){\r\n  let teamldkeyvalue: String = \"\";\r\n    this.getTeamLead(teamldkeyvalue);\r\n\r\n    this.taskAddForm.get('team_lead').valueChanges\r\n      .pipe(\r\n        debounceTime(100),\r\n        distinctUntilChanged(),\r\n        tap(() => {\r\n          this.isLoading = true;\r\n          console.log('inside tap')\r\n\r\n        }),\r\n        switchMap(value => this.taskservice.getTeamLeadFilter(value,1)\r\n          .pipe(\r\n            finalize(() => {\r\n              this.isLoading = false\r\n            }),\r\n          )\r\n        )\r\n      )\r\n      .subscribe((results: any[]) => {\r\n        let datas = results[\"data\"];\r\n        this.teamldList = datas;\r\n\r\n      })\r\n\r\n}\r\n\r\n  private getTeamLead(teamldkeyvalue) {\r\n      this.taskservice.getTeamLeadFilter(teamldkeyvalue,1)\r\n        .subscribe((results: any[]) => {\r\n          let datas = results[\"data\"];\r\n          this.teamldList = datas;\r\n        })\r\n    }\r\n\r\n    public displayFnteamld(teamld?: teamLead): string | undefined {\r\n      return teamld ? teamld.name : undefined;\r\n    }\r\n  \r\n    get teamld() {\r\n      return this.taskAddForm.value.get('team_lead');\r\n    }\r\n\r\n\r\n\r\n    // developer name\r\n    developer(i){\r\n      let devkeyvalue: String = \"\";\r\n        this.getDeveloper(devkeyvalue);\r\n        (this.taskAddForm.get('data') as FormArray).at(i).get('developer').valueChanges\r\n        // this.taskAddForm.get('developer').valueChanges\r\n          .pipe(\r\n            debounceTime(100),\r\n            distinctUntilChanged(),\r\n            tap(() => {\r\n              this.isLoading = true;\r\n              console.log('inside tap')\r\n    \r\n            }),\r\n            switchMap(value => this.taskservice.getdeveloperFilter(value,1)\r\n              .pipe(\r\n                finalize(() => {\r\n                  this.isLoading = false\r\n                }),\r\n              )\r\n            )\r\n          )\r\n          .subscribe((results: any[]) => {\r\n            let datas = results[\"data\"];\r\n            this.developerList = datas;\r\n    \r\n          })\r\n    \r\n    }\r\n    \r\n      private getDeveloper(unithdkeyvalue) {\r\n          this.taskservice.getdeveloperFilter(unithdkeyvalue,1)\r\n            .subscribe((results: any[]) => {\r\n              let datas = results[\"data\"];\r\n              this.developerList = datas;\r\n            })\r\n        }\r\n    \r\n        public displayFndev(emp?: developer): string | undefined {\r\n          return emp ? emp.name : undefined;\r\n        }\r\n      \r\n        get emp() {\r\n          return this.taskAddForm.value.get('developer');\r\n        }\r\n\r\n\r\n        autocompletedevScroll() {\r\n          setTimeout(() => {\r\n            if (\r\n              this.matempAutocomplete &&\r\n              this.autocompleteTrigger &&\r\n              this.matempAutocomplete.panel\r\n            ) {\r\n              fromEvent(this.matempAutocomplete.panel.nativeElement, 'scroll')\r\n                .pipe(\r\n                  map(x => this.matempAutocomplete.panel.nativeElement.scrollTop),\r\n                  takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n                )\r\n                .subscribe(x => {\r\n                  const scrollTop = this.matempAutocomplete.panel.nativeElement.scrollTop;\r\n                  const scrollHeight = this.matempAutocomplete.panel.nativeElement.scrollHeight;\r\n                  const elementHeight = this.matempAutocomplete.panel.nativeElement.clientHeight;\r\n                  const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n                  if (atBottom) {\r\n                    if (this.hasnextdevname === true) {\r\n                      this.taskservice.getdeveloperFilter(this.empInput.nativeElement.value, this.currentpagedevname + 1)\r\n                        .subscribe((results: any[]) => {\r\n                          let datas = results[\"data\"];\r\n                          let datapagination = results[\"pagination\"];\r\n                          this.empList = this.empList.concat(datas);\r\n                          if (this.empList.length >= 0) {\r\n                            this.hasnextdevname = datapagination.has_next;\r\n                            this.haspreviousdevname = datapagination.has_previous;\r\n                            this.currentpagedevname = datapagination.index;\r\n                          }\r\n                        }, (error) => {\r\n      \r\n                        })\r\n                    }\r\n                  }\r\n                });\r\n            }\r\n          });\r\n        }\r\n\r\n\r\n    // client master\r\n    clientmaster(){\r\n      let teamldkeyvalue: String = \"\";\r\n        this.getclientmaster(teamldkeyvalue);\r\n    \r\n        this.mappingForm.get('client_id').valueChanges\r\n          .pipe(\r\n            debounceTime(100),\r\n            distinctUntilChanged(),\r\n            tap(() => {\r\n              this.isLoading = true;\r\n              console.log('inside tap')\r\n    \r\n            }),\r\n            switchMap(value => this.taskservice.getclientmasterFilter(value,1)\r\n              .pipe(\r\n                finalize(() => {\r\n                  this.isLoading = false\r\n                }),\r\n              )\r\n            )\r\n          )\r\n          .subscribe((results: any[]) => {\r\n            let datas = results[\"data\"];\r\n            this.clientmasterList = datas;\r\n    \r\n          })\r\n    \r\n    }\r\n    \r\n      private getclientmaster(teamldkeyvalue) {\r\n          this.taskservice.getclientmasterFilter(teamldkeyvalue,1)\r\n            .subscribe((results: any[]) => {\r\n              let datas = results[\"data\"];\r\n              this.clientmasterList = datas;\r\n            })\r\n        }\r\n    \r\n        public displayFncltmaster(cltmaster?: Clientmaster): string | undefined {\r\n          return cltmaster ? cltmaster.name : undefined;\r\n        }\r\n      \r\n        get cltmaster() {\r\n          return this.mappingForm.value.get('client_id');\r\n        }\r\n\r\n        client_master_Id=0;\r\n        FocusOut_select_clientmaster(data){\r\n          console.log(\"client master\",data);\r\n          this.client_master_Id = data.id;\r\n        }\r\n\r\n      \r\n        clearproject() {\r\n          this.taskAddForm.controls['app_id'].reset(\"\");\r\n          this.taskAddForm.controls['module_id'].reset(\"\");\r\n        }\r\n        clearmodule(){\r\n          this.taskAddForm.controls['module_id'].reset(\"\");\r\n        }\r\n\r\n\r\n        // project master\r\n        projectnamemaster(){\r\n      let teamldkeyvalue: String = \"\";\r\n        this.getprojectnamemaster(teamldkeyvalue);\r\n    \r\n        this.mappingForm.get('project_id').valueChanges\r\n          .pipe(\r\n            debounceTime(100),\r\n            distinctUntilChanged(),\r\n            tap(() => {\r\n              this.isLoading = true;\r\n              console.log('inside tap')\r\n    \r\n            }),\r\n            switchMap(value => this.taskservice.getprojectnamemasterFilter(this.client_master_Id,value,1)\r\n              .pipe(\r\n                finalize(() => {\r\n                  this.isLoading = false\r\n                }),\r\n              )\r\n            )\r\n          )\r\n          .subscribe((results: any[]) => {\r\n            let datas = results[\"data\"];\r\n            this.appNamemasterList = datas;\r\n    \r\n          })\r\n    \r\n    }\r\n    \r\n      private getprojectnamemaster(teamldkeyvalue) {\r\n          this.taskservice.getprojectnamemasterFilter(this.client_master_Id,teamldkeyvalue,1)\r\n            .subscribe((results: any[]) => {\r\n              let datas = results[\"data\"];\r\n              this.appNamemasterList = datas;\r\n            })\r\n        }\r\n    \r\n        public displayFnappnmmaster(promaster?: appNamemaster): string | undefined {\r\n          return promaster ? promaster.name : undefined;\r\n        }\r\n      \r\n        get promaster() {\r\n          return this.mappingForm.value.get('project_id');\r\n        }\r\n\r\n        project_master_Id=0;\r\n        FocusOut_select_projectmaster(data){\r\n          console.log(\"project master\",data);\r\n          this.project_master_Id = data.id;\r\n        }\r\n\r\n\r\n\r\n                // module master\r\n                modulenamemaster(){\r\n                  let teamldkeyvalue: String = \"\";\r\n                    this.getmodulenamemaster(teamldkeyvalue);\r\n                \r\n                    this.mappingForm.get('module_id').valueChanges\r\n                      .pipe(\r\n                        debounceTime(100),\r\n                        distinctUntilChanged(),\r\n                        tap(() => {\r\n                          this.isLoading = true;\r\n                          console.log('inside tap')\r\n                \r\n                        }),\r\n                        switchMap(value => this.taskservice.getmodulenamemasterFilter(this.client_master_Id,this.project_master_Id,value,1)\r\n                          .pipe(\r\n                            finalize(() => {\r\n                              this.isLoading = false\r\n                            }),\r\n                          )\r\n                        )\r\n                      )\r\n                      .subscribe((results: any[]) => {\r\n                        let datas = results[\"data\"];\r\n                        this.moduleNamemasterList = datas;\r\n                \r\n                      })\r\n                \r\n                }\r\n                \r\n                  private getmodulenamemaster(teamldkeyvalue) {\r\n                      this.taskservice.getmodulenamemasterFilter(this.client_master_Id,this.project_master_Id,teamldkeyvalue,1)\r\n                        .subscribe((results: any[]) => {\r\n                          let datas = results[\"data\"];\r\n                          this.moduleNamemasterList = datas;\r\n                        })\r\n                    }\r\n                \r\n                    public displayFnmodnmmaster(modmaster?: ModeuleNamemaster): string | undefined {\r\n                      return modmaster ? modmaster.name : undefined;\r\n                    }\r\n                  \r\n                    get modmaster() {\r\n                      return this.mappingForm.value.get('module_id');\r\n                    }\r\n            \r\n                   \r\n\r\n\r\n\r\n\r\n\r\n\r\n  // createFormate() {\r\n  //   let data = this.taskAddForm.controls;\r\n  //   console.log(\"create formate\",data)\r\n    \r\n  //   let taskclass = new task();\r\n  //   taskclass.app_id = data['app_id'].value.id;\r\n  //   taskclass.client = data['client'].value.id;\r\n  //   taskclass.type = data['type'].value;\r\n  //   taskclass.module_id = data['module_id'].value.id;\r\n  //   // taskclass.unit_head = data['unit_head'].value.id;\r\n  //   // taskclass.team_lead = data['team_lead'].value.id;\r\n  //   // taskclass.developername = data['developername'].value;\r\n  //   taskclass.task = data['task'].value;\r\n  //   taskclass.start_date = data['start_date'].value;\r\n  //   taskclass.end_date = data['end_date'].value;\r\n   \r\n  //   let dateValue = this.taskAddForm.value;\r\n  //   taskclass.start_date = this.datePipe.transform(dateValue.start_date, 'yyyy-MM-dd');\r\n  //   taskclass.end_date = this.datePipe.transform(dateValue.end_date, 'yyyy-MM-dd');\r\n\r\n  //   console.log(\"taskclass\", taskclass)\r\n  //   return taskclass;\r\n  // }\r\n\r\n\r\n  submitForm() {\r\n    // this.taskAddForm.value.developername = this.chipSelectedempid;\r\n    this.SpinnerService.show();\r\n   \r\n    if (this.taskAddForm.value.client.id === undefined || this.taskAddForm.value.client === \"\") {\r\n      this.toastr.error('Please Select Valid Client');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.taskAddForm.value.app_id.id === undefined || this.taskAddForm.value.app_id === \"\" ) {\r\n      this.toastr.error('Please Select Valid Project ');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.taskAddForm.value.project_map_id.id === undefined || this.taskAddForm.value.project_map_id === \"\") {\r\n      this.toastr.error('Please Select Valid Module');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    // if (this.taskAddForm.value.type === undefined || this.taskAddForm.value.type === \"\") {\r\n    //   this.toastr.error('Please Select Valid Dev Type');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n    // if (this.taskAddForm.value.unit_head.id === undefined || this.taskAddForm.value.unit_head === \"\") {\r\n    //   this.toastr.error('Please Select Valid Unit Head');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n    // if (this.taskAddForm.value.team_lead.id === undefined || this.taskAddForm.value.team_lead === \"\") {\r\n    //   this.toastr.error('Please Select Valid Team Lead');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n \r\n    // if (this.taskAddForm.value.start_date === \"\") {\r\n    //   this.toastr.error('Please Select Start Date');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n\r\n    // if (this.taskAddForm.value.end_date === \"\") {\r\n    //   this.toastr.error('Please Select End Date');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n    // if (this.taskAddForm.value.task === \"\") {\r\n    //   this.toastr.error('Please Enter Task');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n    // if (this.chipSelectedempid.length === 0) {\r\n    //   this.toastr.error('Please Select Developer Name');\r\n    //   this.SpinnerService.hide();\r\n    //   return false;\r\n    // }\r\n\r\n    let details =this.taskAddForm.value.data\r\n    for(let i=0;i<details.length;i++){\r\n     if (details[i].dev_type == '' || details[i].dev_type == null || details[i].dev_type == undefined) {\r\n       this.notification.showError('Please Select Developer Type')\r\n       this.SpinnerService.hide();\r\n       return false\r\n     }\r\n     if (details[i].start_date == '') {\r\n       this.notification.showError('Please Select Planned Start Date')\r\n       this.SpinnerService.hide();\r\n       return false\r\n     }\r\n     if (details[i].end_date == '') {\r\n      this.notification.showError('Please Select Planned End Date')\r\n      this.SpinnerService.hide();\r\n      return false\r\n    }\r\n    if (details[i].developer.id === undefined || details[i].developer === \"\") {\r\n      this.toastr.error('Please Select Valid Developer');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (details[i].task == '') {\r\n      this.notification.showError('Please Enter Task Name')\r\n      this.SpinnerService.hide();\r\n      return false\r\n    }\r\n    }\r\n    \r\n    this.taskAddForm.value.project_map_id = this.taskAddForm.value.project_map_id.mapping_id\r\n    for (let i in details) {\r\n     details[i].developer = details[i].developer.id;\r\n     details[i].start_date = this.datePipe.transform(details[i].start_date, 'yyyy-MM-dd');\r\n     details[i].end_date = this.datePipe.transform(details[i].end_date, 'yyyy-MM-dd');\r\n    }\r\n    \r\n \r\n    \r\n      console.log(\"create\",this.taskAddForm.value)\r\n      this.taskservice.taskCreateForm(this.taskAddForm.value)\r\n      .subscribe(res => {\r\n        console.log(\"vendor\", res)\r\n        if(res.message === \"Successfully Created\"){\r\n          this.notification.showSuccess(\"Created Successfully!...\")\r\n          this.SpinnerService.hide();\r\n          this.onSubmit.emit();\r\n        } \r\n        else {\r\n          this.notification.showError(res.description)\r\n          this.SpinnerService.hide();\r\n          return false;\r\n        }\r\n      },\r\n      error => {\r\n        this.errorHandler.handleError(error);\r\n        this.SpinnerService.hide();\r\n      }\r\n      )\r\n  }\r\n\r\n\r\n\r\n// app name\r\n  autocompleteAppnmScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getappNameFilter(this.client_Id,this.appnmInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.appNameList = this.appNameList.concat(datas);\r\n                    if (this.appNameList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  // client\r\n  autocompleteCltScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matclientAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matclientAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matclientAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matclientAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matclientAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matclientAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matclientAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getcltFilter(this.cltInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.clientList = this.clientList.concat(datas);\r\n                    if (this.clientList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  // module name\r\n  autocompletemodnmScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matmodulenameAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matmodulenameAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matmodulenameAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matmodulenameAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matmodulenameAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matmodulenameAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matmodulenameAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getmodulenameFilter(this.client_Id,this.project_Id,this.modnmInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.moduleNameList = this.moduleNameList.concat(datas);\r\n                    if (this.moduleNameList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n// unit head\r\nautocompleteuntheadScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matunitheadAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matunitheadAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matunitheadAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matunitheadAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matunitheadAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matunitheadAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matunitheadAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getUnitHeadFilter(this.unitHDInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.unitheadList = this.unitheadList.concat(datas);\r\n                    if (this.unitheadList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n// team  lead\r\nautocompleteteteamldScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matteamleadAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matteamleadAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matteamleadAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matteamleadAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matteamleadAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matteamleadAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matteamleadAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getTeamLeadFilter(this.teamldInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.teamldList = this.teamldList.concat(datas);\r\n                    if (this.teamldList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  // client master\r\n  autocompleteCltmasterScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matclientmasterAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matclientmasterAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matclientmasterAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matclientmasterAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matclientmasterAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matclientmasterAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matclientmasterAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getclientmasterFilter(this.cltmasterInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.clientmasterList = this.clientmasterList.concat(datas);\r\n                    if (this.clientmasterList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n   // project master\r\n   autocompleteAppnmmasterScroll() {\r\n    setTimeout(() => {\r\n      if (\r\n        this.maprotmasterAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.maprotmasterAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.maprotmasterAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.maprotmasterAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.maprotmasterAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.maprotmasterAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.maprotmasterAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.has_next === true) {\r\n                this.taskservice.getprojectnamemasterFilter(this.client_master_Id,this.appnmmasterInput.nativeElement.value, this.currentpage + 1)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.appNamemasterList = this.appNamemasterList.concat(datas);\r\n                    if (this.appNamemasterList.length >= 0) {\r\n                      this.has_next = datapagination.has_next;\r\n                      this.has_previous = datapagination.has_previous;\r\n                      this.currentpage = datapagination.index;\r\n                    }\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n// module master\r\nautocompletemodnmmasterScroll() {\r\n  setTimeout(() => {\r\n    if (\r\n      this.matmodulenamemasterAutocomplete &&\r\n      this.autocompleteTrigger &&\r\n      this.matmodulenamemasterAutocomplete.panel\r\n    ) {\r\n      fromEvent(this.matmodulenamemasterAutocomplete.panel.nativeElement, 'scroll')\r\n        .pipe(\r\n          map(x => this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollTop),\r\n          takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n        )\r\n        .subscribe(x => {\r\n          const scrollTop = this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollTop;\r\n          const scrollHeight = this.matmodulenamemasterAutocomplete.panel.nativeElement.scrollHeight;\r\n          const elementHeight = this.matmodulenamemasterAutocomplete.panel.nativeElement.clientHeight;\r\n          const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n          if (atBottom) {\r\n            if (this.has_next === true) {\r\n              this.taskservice.getmodulenamemasterFilter(this.client_master_Id,this.project_master_Id,this.modnmmasterInput.nativeElement.value, this.currentpage + 1)\r\n                .subscribe((results: any[]) => {\r\n                  let datas = results[\"data\"];\r\n                  let datapagination = results[\"pagination\"];\r\n                  this.moduleNamemasterList = this.moduleNamemasterList.concat(datas);\r\n                  if (this.moduleNamemasterList.length >= 0) {\r\n                    this.has_next = datapagination.has_next;\r\n                    this.has_previous = datapagination.has_previous;\r\n                    this.currentpage = datapagination.index;\r\n                  }\r\n                })\r\n            }\r\n          }\r\n        });\r\n    }\r\n  });\r\n}\r\n  \r\n\r\n\r\n  getemp(keyvalue, type) {\r\n    this.taskservice.employeesearch(keyvalue, 1, type)\r\n      .subscribe((results: any[]) => {\r\n        this.SpinnerService.hide();\r\n        let datas = results[\"data\"];\r\n        this.empList = datas;\r\n        console.log(\"emp data get \", this.empList)\r\n      }, (error) => {\r\n        this.errorHandler.handleError(error);\r\n        this.SpinnerService.hide();\r\n      })\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  public removedemp(emp: emplistss): void {\r\n    const index = this.chipSelectedemp.indexOf(emp);\r\n\r\n    if (index >= 0) {\r\n\r\n      this.chipSelectedemp.splice(index, 1);\r\n      console.log(this.chipSelectedemp);\r\n      this.chipSelectedempid.splice(index, 1);\r\n      console.log(this.chipSelectedempid);\r\n      this.empInput.nativeElement.value = '';\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  public empSelected(event: MatAutocompleteSelectedEvent): void {\r\n    console.log('event.option.value', event.option.value)\r\n    this.selectempByName(event.option.value.name);\r\n    this.empInput.nativeElement.value = '';\r\n    console.log('chipSelectedempid', this.chipSelectedempid)\r\n  }\r\n  private selectempByName(emp) {\r\n    let foundemp1 = this.chipSelectedemp.filter(e => e.name == emp);\r\n    if (foundemp1.length) {\r\n      return;\r\n    }\r\n    let foundemp = this.empList.filter(e => e.name == emp);\r\n    if (foundemp.length) {\r\n      this.chipSelectedemp.push(foundemp[0]);\r\n      this.chipSelectedempid.push(foundemp[0].id)\r\n    }\r\n  }\r\n\r\n\r\n  autocompleteempScroll(type) {\r\n    setTimeout(() => {\r\n      if (\r\n        this.matempAutocomplete &&\r\n        this.autocompleteTrigger &&\r\n        this.matempAutocomplete.panel\r\n      ) {\r\n        fromEvent(this.matempAutocomplete.panel.nativeElement, 'scroll')\r\n          .pipe(\r\n            map(x => this.matempAutocomplete.panel.nativeElement.scrollTop),\r\n            takeUntil(this.autocompleteTrigger.panelClosingActions)\r\n          )\r\n          .subscribe(x => {\r\n            const scrollTop = this.matempAutocomplete.panel.nativeElement.scrollTop;\r\n            const scrollHeight = this.matempAutocomplete.panel.nativeElement.scrollHeight;\r\n            const elementHeight = this.matempAutocomplete.panel.nativeElement.clientHeight;\r\n            const atBottom = scrollHeight - 1 <= scrollTop + elementHeight;\r\n            if (atBottom) {\r\n              if (this.hasnextdevname === true) {\r\n                this.taskservice.employeesearch(this.empInput.nativeElement.value, this.currentpagedevname + 1, type)\r\n                  .subscribe((results: any[]) => {\r\n                    let datas = results[\"data\"];\r\n                    let datapagination = results[\"pagination\"];\r\n                    this.empList = this.empList.concat(datas);\r\n                    if (this.empList.length >= 0) {\r\n                      this.hasnextdevname = datapagination.has_next;\r\n                      this.haspreviousdevname = datapagination.has_previous;\r\n                      this.currentpagedevname = datapagination.index;\r\n                    }\r\n                  }, (error) => {\r\n\r\n                  })\r\n              }\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  set_StartDate:any;\r\n  StartDate(event: string) {\r\n    const date = new Date(event)\r\n    // this.ss1 = date\r\n    this.set_StartDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())\r\n  }\r\n\r\n  \r\n  //     const currentYear = new Date().getFullYear();\r\n  //     this.setdefault_date = new Date(currentYear - 0, 0, 22);\r\n  // }\r\n\r\n\r\n\r\n\r\n  client_Id=0;\r\n  FocusOut_select_client(data) {\r\n    console.log(\"client\",data);\r\n    this.client_Id = data.id;\r\n    console.log(\"client- id\", this.client_Id)\r\n  }\r\n  project_Id=0;\r\n  FocusOut_select_project(data) {\r\n    console.log(\"client\",data);\r\n    this.project_Id = data.id;\r\n    console.log(\"project- id\", this.project_Id)\r\n  }\r\n\r\n\r\n\r\n  developer_List = [];\r\n  getTaskEdit() {\r\n    this.taskservice.gettaskview(this.task_Id)\r\n      .subscribe(result => {\r\n          let data = result\r\n          console.log(\"totalldata\", data)\r\n          this.developer_List = data.dev_arr;\r\n          \r\n          const startdate = this.datePipe.transform(data.start_date, 'yyyy-MM-dd');\r\n          const enddate = this.datePipe.transform(data.end_date, 'yyyy-MM-dd');\r\n      \r\n          this.taskAddForm.patchValue({\r\n            // \"app_id\": data.app_id,\r\n            // \"client\": data.client_name,\r\n            // \"type\": data.dev_type,\r\n            // \"module_id\" : data.module_id,\r\n            \"unit_head\": data.unit_head,\r\n            \"team_lead\":data.team_lead,\r\n            \"employee_arr\": data.developer_List,\r\n            \"task\": data.task_status,\r\n            \"start_date\": startdate,\r\n            \"end_date\": enddate,\r\n          })\r\n\r\n      })\r\n  }\r\n\r\n\r\n  clientSubmit(){\r\n    this.SpinnerService.show();\r\n    if (this.clientForm.value.name === \"\") {\r\n      this.toastr.error('Please Enter Client');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n\r\n    this.taskservice.clientForm(this.clientForm.value)\r\n    .subscribe(res => {\r\n      console.log(\"client click\", res)\r\n      if(res.message == 'Successfully Created'){\r\n        this.notification.showSuccess(\"Created Successfully!...\");\r\n        this.clientForm = this.formBuilder.group({\r\n          name: [''],\r\n        })\r\n        this.SpinnerService.hide();\r\n        \r\n       } else {\r\n        this.notification.showError(res.description)\r\n        this.SpinnerService.hide();\r\n        return false;\r\n      }\r\n    },\r\n    error => {\r\n      this.errorHandler.handleError(error);\r\n      this.SpinnerService.hide();\r\n    }\r\n    )\r\n  }\r\n\r\n  projectSubmit(){\r\n    this.SpinnerService.show();\r\n    if (this.projectForm.value.name === \"\") {\r\n      this.toastr.error('Please Enter Project');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.projectForm.value.start_date === \"\") {\r\n      this.toastr.error('Please Select Start Date');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.projectForm.value.end_date === \"\") {\r\n      this.toastr.error('Please Select End Date');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    let dateValue = this.projectForm.value;\r\n    dateValue.start_date = this.datePipe.transform(dateValue.start_date, 'yyyy-MM-dd');\r\n    dateValue.end_date = this.datePipe.transform(dateValue.end_date, 'yyyy-MM-dd');\r\n    this.taskservice.projectForm(this.projectForm.value)\r\n    .subscribe(res => {\r\n      console.log(\"project click\", res)\r\n      if(res.message == 'Successfully Created'){\r\n        this.notification.showSuccess(\"Created Successfully!...\");\r\n        this.projectForm = this.formBuilder.group({\r\n          name: [''],\r\n          start_date:[''],\r\n          end_date:[''],\r\n        })\r\n        this.SpinnerService.hide();\r\n       } else {\r\n        this.notification.showError(res.description)\r\n        this.SpinnerService.hide();\r\n        return false;\r\n      }\r\n    },\r\n    error => {\r\n      this.errorHandler.handleError(error);\r\n      this.SpinnerService.hide();\r\n    }\r\n    )\r\n  }\r\n  moduleSubmit(){\r\n    this.SpinnerService.show();\r\n    if (this.moduleForm.value.name === \"\") {\r\n      this.toastr.error('Please Enter Module');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    this.taskservice.moduleForm(this.moduleForm.value)\r\n    .subscribe(res => {\r\n      console.log(\"module click\", res)\r\n      if(res.message == 'Successfully Created'){\r\n        this.notification.showSuccess(\"Created Successfully!...\");\r\n        this.moduleForm = this.formBuilder.group({\r\n          name: [''],\r\n         \r\n        })\r\n        this.SpinnerService.hide();\r\n       } else {\r\n        this.notification.showError(res.description)\r\n        this.SpinnerService.hide();\r\n        return false;\r\n      }\r\n    },\r\n    error => {\r\n      this.errorHandler.handleError(error);\r\n      this.SpinnerService.hide();\r\n    }\r\n    )\r\n  }\r\n\r\n  mappingSubmit(){\r\n    this.SpinnerService.show();\r\n    if (this.mappingForm.value.client_id === \"\") {\r\n      this.toastr.error('Please Select Vaild Client');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.mappingForm.value.project_id === \"\") {\r\n      this.toastr.error('Please Select Vaild Project');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n    if (this.mappingForm.value.module_id === \"\") {\r\n      this.toastr.error('Please Select Vaild Module');\r\n      this.SpinnerService.hide();\r\n      return false;\r\n    }\r\n\r\n    this.taskservice.mappingForm(this.createFormatemapping())\r\n    .subscribe(res => {\r\n      console.log(\"module click\", res)\r\n      if(res.message == 'Successfully Created'){\r\n        this.notification.showSuccess(\"Created Successfully!...\");\r\n        this.mappingForm = this.formBuilder.group({\r\n          client_id: [''],\r\n          project_id: [''],\r\n          module_id: [''],\r\n        })\r\n        this.SpinnerService.hide();\r\n       } else {\r\n        this.notification.showError(res.description)\r\n        this.SpinnerService.hide();\r\n        return false;\r\n      }\r\n    },\r\n    error => {\r\n      this.errorHandler.handleError(error);\r\n      this.SpinnerService.hide();\r\n    }\r\n    )\r\n  }\r\n\r\n  createFormatemapping() {\r\n    let data = this.mappingForm.controls;\r\n    let taskmasterclass = new taskmaster();\r\n    taskmasterclass.client_id = data['client_id'].value.id;\r\n    taskmasterclass.project_id = data['project_id'].value.id;\r\n    taskmasterclass.module_id = data['module_id'].value.module_id;\r\n    return taskmasterclass;\r\n  }\r\n\r\n  \r\n  set_masterStartDate:any;\r\n  MasterStartDate(event: string) {\r\n    const date = new Date(event)\r\n    this.set_masterStartDate = new Date(date.getFullYear(), date.getMonth(), date.getDate())\r\n  }\r\n\r\n  oncancel() {\r\n   \r\n    this.onCancel.emit()\r\n\r\n}\r\n\r\nDocumentfilearray: any = []\r\nonFileSelected(e) {\r\n  console.log(\"e in file\", e)\r\n  for (var i = 0; i < e.target.files.length; i++) {\r\n    this.Documentfilearray.push(e.target.files[i])\r\n  }\r\n  console.log(\"document array===>\", this.Documentfilearray)\r\n}\r\n\r\ndeleteInlineFile(fileindex, data) {\r\n  console.log(\"fileindex\", fileindex)\r\n  let filedata = this.Documentfilearray\r\n  console.log(\"filedata for delete before\", filedata)\r\n  console.log(\"filedata selected\", data)\r\n\r\n    filedata.splice(fileindex, 1)\r\n    console.log(\"filedata for delete after\", filedata)\r\n}\r\n\r\n}\r\n\r\nclass task {\r\n  \r\n  app_id: string;\r\n  client: string;\r\n  type: string;\r\n  module_id : string;\r\n  unit_head: string;\r\n  team_lead: string;\r\n  employee_arr: string;\r\n  task:string;\r\n  start_date: string;\r\n  end_date: string;\r\n\r\n\r\n}\r\n\r\nclass taskmaster {\r\n  client_id: string;\r\n  project_id: string;\r\n  module_id: string;\r\n}\r\n\r\n","<div >\r\n    <mat-card style=\"margin-top: 13px;margin-right: 20px;margin-bottom: 20px;\" >\r\n    <div style=\"margin-left: 5px;margin-top: 1%; width: 100%;\">\r\n        <h2 class=\"header\">\r\n            Task Creation\r\n        </h2>\r\n        <hr>\r\n        <div  >\r\n            <form [formGroup]=\"taskAddForm\"  autocomplete=\"off\">\r\n                <table>\r\n                    <div>\r\n                        <tr>\r\n                            \r\n                            <td>\r\n                                <mat-label >Client<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\"\r\n                                (click)=\"client()\">\r\n\r\n                                <input #cltInput  class=\"matformfieldinputstyle\" matInput (click)=\"clearproject()\"\r\n                                    formControlName=\"client\" [matAutocomplete]=\"clt\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #clt=\"matAutocomplete\" [displayWith]=\"displayFnclt\"\r\n                                    (opened)=\"autocompleteCltScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let clt of clientList\"  (focusout)=\"FocusOut_select_client(clt)\" [value]=\"clt\">\r\n                                            {{clt.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 30px;\">Project Name<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" style=\"margin-left: 30px;\" appearance=\"outline\"\r\n                                (click)=\"appName()\">\r\n\r\n                                <input #appnmInput  class=\"matformfieldinputstyle\" matInput (click)=\"clearmodule()\"\r\n                                    formControlName=\"app_id\" [matAutocomplete]=\"appnm\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #appnm=\"matAutocomplete\" [displayWith]=\"displayFnappnm\"\r\n                                    (opened)=\"autocompleteAppnmScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let appnm of appNameList\" (focusout)=\"FocusOut_select_project(appnm)\" [value]=\"appnm\">\r\n                                            {{appnm.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 30px;\">Module Name<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" style=\"margin-left: 30px;\" appearance=\"outline\"\r\n                                (click)=\"moduleName()\">\r\n\r\n                                <input #modnmInput  class=\"matformfieldinputstyle\" matInput\r\n                                    formControlName=\"project_map_id\" [matAutocomplete]=\"modnm\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #modnm=\"matAutocomplete\" [displayWith]=\"displayFnmodnm\"\r\n                                    (opened)=\"autocompletemodnmScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let modnm of moduleNameList\" [value]=\"modnm\">\r\n                                            {{modnm.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td>\r\n        \r\n                          \r\n                           \r\n                            <td>\r\n                                <!-- <button mat-fab type=\"button\" \r\n                                style=\"margin-left: 20px;background-color: burlywood;\" data-bs-toggle=\"modal\"\r\n                                data-bs-target=\"#createMaster\" (click)=\"master()\">\r\n                                <mat-icon matTooltip=\"Add Master\">add</mat-icon></button> -->\r\n                                <button type=\"button\" style=\"  border-radius: 10px;margin-left: 20px;border-color: #f5c68b;\r\n                                \r\n                                background-color: #f5c68b;\" data-bs-toggle=\"modal\"\r\n                                data-bs-target=\"#createMaster\" class=\"btn btn-light\" \r\n                                    (click)=\"master()\"><i class=\"fa fa-plus-circle\"></i> Add Master</button>\r\n                            </td>\r\n                        </tr>\r\n                        <!-- <tr> -->\r\n                            <!-- <td>\r\n                                <mat-label >Dev Type<label style=\"color:red\">*</label> </mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" style=\"width: 250px;\" appearance=\"outline\">\r\n                                    <mat-select class=\"matformfieldinputstyle\" formControlName=\"type\">\r\n                                        <mat-option *ngFor=\"let devtype of devtypelist\" \r\n                                            [value]=\"devtype.id\">\r\n                                            {{devtype.text}}\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </td> -->\r\n        \r\n                            <!-- <td>\r\n                                <mat-label style=\"margin-left: 60px;\" >Unit Head<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" style=\"width: 250px;margin-left: 60px;\" appearance=\"outline\"\r\n                                (click)=\"unitHead()\">\r\n\r\n                                <input #unitHDInput  class=\"matformfieldinputstyle\" matInput\r\n                                    formControlName=\"unit_head\" [matAutocomplete]=\"unitHD\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #unitHD=\"matAutocomplete\" [displayWith]=\"displayFnunitHD\"\r\n                                    (opened)=\"autocompleteuntheadScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let unitHd of unitheadList\" [value]=\"unitHd\">\r\n                                            {{unitHd.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td> -->\r\n\r\n                            <!-- <td>\r\n                                <mat-label style=\"margin-left: 60px;\" >Team Lead<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" style=\"width: 250px;margin-left: 60px;\" appearance=\"outline\"\r\n                                (click)=\"TeamLead()\">\r\n\r\n                                <input #teamldInput  class=\"matformfieldinputstyle\" matInput\r\n                                    formControlName=\"team_lead\" [matAutocomplete]=\"teamld\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #teamld=\"matAutocomplete\" [displayWith]=\"displayFnteamld\"\r\n                                    (opened)=\"autocompleteteteamldScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let teamld of teamldList\" [value]=\"teamld\">\r\n                                            {{teamld.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td> -->\r\n                        <!-- </tr> -->\r\n                        <!-- <tr>\r\n                            <td>\r\n                                <mat-label>Planned Start Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"width: 250px;\">\r\n    \r\n                                    <input matInput readonly [matDatepicker]=\"picker1\" class=\"matformfieldinputstyle\"\r\n                                         formControlName=\"start_date\" [min]=\"set_Threedays_ago\" (dateChange)=\"StartDate($event.value)\" >\r\n                                    <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker1\">\r\n                                    </mat-datepicker-toggle>\r\n                                    <mat-datepicker #picker1></mat-datepicker>\r\n                                </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 60px;\">Planned End Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"width: 250px;margin-left: 60px;\">\r\n    \r\n                                    <input matInput readonly [min]=\"set_StartDate\" [matDatepicker]=\"picker2\" class=\"matformfieldinputstyle\"\r\n                                         formControlName=\"end_date\" >\r\n                                    <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker2\">\r\n                                    </mat-datepicker-toggle>\r\n                                    <mat-datepicker #picker2></mat-datepicker>\r\n                                </mat-form-field>\r\n                            </td>\r\n                           \r\n                            \r\n                        </tr> -->\r\n                        <!-- <tr>\r\n                            <td colspan=\"4\">\r\n                                <mat-label>Task Name<label style=\"color:red\">*</label></mat-label><br>\r\n                                <mat-form-field class=\"lenthoftextfield matformfieldstyle\">\r\n                                    <textarea class=\"matformfieldinputstyle heightdesc\" type=\"text\"\r\n                                        placeholder=\"Task Name...\" formControlName=\"task\" matInput\r\n                                        autocomplete=\"off\"></textarea>\r\n                                </mat-form-field>\r\n                            </td>\r\n                        </tr> -->\r\n                       \r\n                        <!-- <tr>\r\n\r\n                            <td colspan=\"4\">\r\n                                <mat-label>Developer Name<label style=\"color:red\">*</label> </mat-label><br>\r\n                                <mat-form-field class=\"lenthoftextfield matformfieldinputstyle\" (click)=\"getemp('', 0)\">\r\n                                    <mat-chip-list #chipListemp>\r\n                                        <mat-chip *ngFor=\"let empl of chipSelectedemp\" [selectable]=true [removable]=true\r\n                                            (removed)=\"removedemp(empl)\">\r\n                                            {{empl.name}}\r\n                                            <mat-icon matChipRemove>cancel</mat-icon>\r\n                                        </mat-chip>\r\n                                        <input #empInput [formControl]=\"employee_arr\" [matAutocomplete]=\"emp\"\r\n                                            placeholder=\"Select Developer Name\" class=\"matformfieldinputstyle\"\r\n                                            (keyup)=\"getemp(employee_arr.value, 0)\" [matChipInputFor]=\"chipListemp\"\r\n                                            [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n                                            [matChipInputAddOnBlur]=true required>\r\n                                    </mat-chip-list>\r\n    \r\n                                    <mat-autocomplete #emp=\"matAutocomplete\" (optionSelected)=\"empSelected($event)\"\r\n                                        (opened)=\"autocompleteempScroll('')\">\r\n                                        <mat-option *ngFor=\"let emp of empList\" [value]=\"emp\">\r\n                                            {{emp.name}}\r\n                                        </mat-option>\r\n                                    </mat-autocomplete>\r\n                                </mat-form-field>\r\n                            </td>\r\n                        </tr> -->\r\n\r\n                        <!-- <tr>\r\n                            <td>\r\n                                <div style=\"vertical-align: center;\">Documents: </div>\r\n                                <div class=\"input-group mb-3 inputCMTFile01\">\r\n                                    <div class=\"custom-file\">\r\n                                        <input type=\"file\" (change)=\"onFileSelected($event)\" multiple\r\n                                            class=\"custom-file-input\" id=\"inputGroupFile01\">\r\n                                        <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\r\n                                    </div>\r\n                                </div>\r\n    \r\n                            </td>\r\n                        </tr>\r\n                        <div *ngIf=\"Documentfilearray?.length > 0\">\r\n                            <p> Attachments:</p>\r\n                            <div style=\"display:inline\" *ngFor=\"let files of Documentfilearray; let indexfile = index\">\r\n                                <div class=\"btn-group mr-2 mb-2\" role=\"group\" aria-label=\"First group\">\r\n                                    <button style=\"font-size:14px;border-top-left-radius: 40px;border-bottom-left-radius: 40px;\" type=\"button\" class=\"btn btncolor\" >{{indexfile+1}}.{{files?.name}}</button>\r\n                                    <button style=\"border-top-right-radius: 40px;border-bottom-right-radius: 40px;\" type=\"button\" class=\"btn btncolor\" (click)=\"deleteInlineFile(indexfile, '')\">X</button>\r\n                                </div>\r\n                            </div>\r\n                        </div> -->\r\n                    </div>\r\n                </table>\r\n\r\n\r\n                <table>\r\n                    <tr>\r\n                        <span (click)=\"addSection()\" style=\"margin-left: 20px;\">\r\n                            <mat-icon matTooltip=\"Add\">add_circle_outline</mat-icon>\r\n                        </span>\r\n                    </tr>\r\n                </table>\r\n\r\n                <div class=\"table-responsive\" style=\"margin-top: 1%;width:100%\">\r\n                    <table class=\"table table-bordered\" fixed-header style=\"margin-top: 10px;width:90%\">\r\n                        <thead class=\"table_header\" style=\"text-align: left;\"> \r\n                            <tr>\r\n                                <th>S.No</th>\r\n                                <th>Dev Type</th>\r\n                                <th>Planned Start Date</th>\r\n                                <th>Planned End Date</th>\r\n                                <th>Developer</th>\r\n                                <th>Task</th>\r\n                                <th>Delete</th>\r\n                            </tr>\r\n                        </thead>\r\n                \r\n                            <ng-container formArrayName=\"data\"\r\n                                            *ngFor=\"let section of getSections(taskAddForm); let i = index\">\r\n                                            <tr [formGroupName]=\"i\">\r\n                                                <td>{{i+1}}</td>\r\n                                                <td>\r\n                                                    <mat-label >Dev Type<label style=\"color:red\">*</label> </mat-label><br>\r\n                                                    <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\">\r\n                                                        <mat-select class=\"matformfieldinputstyle\" formControlName=\"dev_type\">\r\n                                                            <mat-option *ngFor=\"let devtype of devtypelist\" \r\n                                                                [value]=\"devtype.id\">\r\n                                                                {{devtype.text}}\r\n                                                            </mat-option>\r\n                                                        </mat-select>\r\n                                                    </mat-form-field>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <mat-label>Planned Start Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                                    <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\">\r\n                        \r\n                                                        <input matInput readonly [matDatepicker]=\"picker1\" class=\"matformfieldinputstyle\"\r\n                                                             formControlName=\"start_date\" [min]=\"set_Threedays_ago\" (dateChange)=\"StartDate($event.value)\" >\r\n                                                        <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker1\">\r\n                                                        </mat-datepicker-toggle>\r\n                                                        <mat-datepicker #picker1></mat-datepicker>\r\n                                                    </mat-form-field>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <mat-label >Planned End Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                                    <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" >\r\n                        \r\n                                                        <input matInput readonly [min]=\"set_StartDate\" [matDatepicker]=\"picker2\" class=\"matformfieldinputstyle\"\r\n                                                             formControlName=\"end_date\" >\r\n                                                        <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker2\">\r\n                                                        </mat-datepicker-toggle>\r\n                                                        <mat-datepicker #picker2></mat-datepicker>\r\n                                                    </mat-form-field>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <mat-label >Developer <label style=\"color:red\">*</label></mat-label><br>\r\n                                                <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\"\r\n                                                    (click)=\"developer(i)\">\r\n                    \r\n                                                    <input #empInput  class=\"matformfieldinputstyle\" matInput\r\n                                                        formControlName=\"developer\" [matAutocomplete]=\"emp\" required>\r\n                                                        <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                                    <mat-autocomplete #emp=\"matAutocomplete\" [displayWith]=\"displayFndev\"\r\n                                                        (opened)=\"autocompletedevScroll()\">\r\n                                                        <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                                        <ng-container *ngIf=\"!isLoading\">\r\n                                                            <mat-option *ngFor=\"let dev of developerList\" [value]=\"dev\">\r\n                                                                {{dev.name}}\r\n                                                            </mat-option>\r\n                                                        </ng-container>\r\n                                                    </mat-autocomplete>\r\n                                                </mat-form-field>\r\n                                                </td>\r\n                                                <td>\r\n                                                        <mat-label>Task Name<label style=\"color:red\">*</label></mat-label><br>\r\n                                                        <mat-form-field class=\"lenthoftextfield matformfieldstyle\">\r\n                                                            <textarea class=\"matformfieldinputstyle heightdesc\" type=\"text\"\r\n                                                                placeholder=\"Task Name...\" formControlName=\"task\" matInput\r\n                                                                autocomplete=\"off\"></textarea>\r\n                                                        </mat-form-field>\r\n                                                </td>\r\n                                                <td>\r\n                                                    <button mat-icon-button type=\"button\">\r\n                                                        <mat-icon style=\"color: black;\" *ngIf=\"taskAddForm.get('data')['controls'].length > 1\"\r\n                                                            (click)=removeSection(i)>\r\n                                                            delete</mat-icon>\r\n                                                    </button>\r\n                                                </td>\r\n                                            </tr>\r\n                            </ng-container>\r\n                        </table>\r\n                </div>\r\n\r\n                <!-- <div>\r\n                    <table formArrayName=\"data\">\r\n                        <tr *ngFor=\"let data of taskAddForm.controls.data['controls']; let dataIndex = index\"\r\n                            [formGroupName]=\"dataIndex\">\r\n                            <td>\r\n                                <mat-label >Dev Type<label style=\"color:red\">*</label> </mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" style=\"width: 250px;\" appearance=\"outline\">\r\n                                    <mat-select class=\"matformfieldinputstyle\" formControlName=\"type\">\r\n                                        <mat-option *ngFor=\"let devtype of devtypelist\" \r\n                                            [value]=\"devtype.id\">\r\n                                            {{devtype.text}}\r\n                                        </mat-option>\r\n                                    </mat-select>\r\n                                </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 60px;\">Planned Start Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"width: 250px;margin-left: 60px;\">\r\n    \r\n                                    <input matInput readonly [matDatepicker]=\"picker1\" class=\"matformfieldinputstyle\"\r\n                                         formControlName=\"start_date\" [min]=\"set_Threedays_ago\" (dateChange)=\"StartDate($event.value)\" >\r\n                                    <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker1\">\r\n                                    </mat-datepicker-toggle>\r\n                                    <mat-datepicker #picker1></mat-datepicker>\r\n                                </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 60px;\">Planned End Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"width: 250px;margin-left: 60px;\">\r\n    \r\n                                    <input matInput readonly [min]=\"set_StartDate\" [matDatepicker]=\"picker2\" class=\"matformfieldinputstyle\"\r\n                                         formControlName=\"end_date\" >\r\n                                    <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"picker2\">\r\n                                    </mat-datepicker-toggle>\r\n                                    <mat-datepicker #picker2></mat-datepicker>\r\n                                </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                <mat-label style=\"margin-left: 60px;\">Developer Name<label style=\"color:red\">*</label></mat-label><br>\r\n                            <mat-form-field class=\"matformfieldstyle\" style=\"width: 250px;margin-left: 60px;\" appearance=\"outline\"\r\n                                (click)=\"developer()\">\r\n\r\n                                <input #empInput  class=\"matformfieldinputstyle\" matInput\r\n                                    formControlName=\"developer\" [matAutocomplete]=\"emp\" required>\r\n                                    <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                <mat-autocomplete #emp=\"matAutocomplete\" [displayWith]=\"displayFndev\"\r\n                                    (opened)=\"autocompletedevScroll()\">\r\n                                    <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                    <ng-container *ngIf=\"!isLoading\">\r\n                                        <mat-option *ngFor=\"let dev of developerList\" [value]=\"dev\">\r\n                                            {{dev.name}}\r\n                                        </mat-option>\r\n                                    </ng-container>\r\n                                </mat-autocomplete>\r\n                            </mat-form-field>\r\n                            </td>\r\n                            <td>\r\n                                    <mat-label>Task Name<label style=\"color:red\">*</label></mat-label><br>\r\n                                    <mat-form-field class=\"lenthoftextfield matformfieldstyle\">\r\n                                        <textarea class=\"matformfieldinputstyle heightdesc\" type=\"text\"\r\n                                            placeholder=\"Task Name...\" formControlName=\"task\" matInput\r\n                                            autocomplete=\"off\"></textarea>\r\n                                    </mat-form-field>\r\n                            </td>\r\n                            \r\n                        </tr>\r\n                        <tr>\r\n                            <td><button mat-button (click)=\"AddTask()\">+ Add Task</button></td> \r\n                        </tr>\r\n                    </table>\r\n                </div> -->\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                \r\n\r\n             \r\n   \r\n    </form>\r\n    </div>\r\n    </div>\r\n    </mat-card>\r\n\r\n\r\n\r\n    <div style=\"margin-bottom: 25px; margin-top: 30px;margin-left: 50px; \">\r\n       \r\n        <button type=\"button\" class=\"btn btn-light\" (click)=\"oncancel()\" style=\"border-radius: 7px;margin-left: 10px;\r\n                        border-color: black;\r\n                        background-color: white;\"  >Cancel</button>\r\n        <button type=\"submit\" style=\"border-radius: 10px;margin-left: 10px;\r\n                    border-color: #f5c68b;\r\n                    background-color: #f5c68b;\" (click)=\"submitForm()\" class=\"btn btn-light\">Submit</button>\r\n    </div>\r\n    </div>\r\n    <ngx-spinner bdColor=\"rgba(51, 51, 51, 0.8)\" size=\"default\" [fullScreen]=\"true\" type=\"ball-spin-clockwise\">\r\n        <p style=\"color: white\">Please Wait. </p>\r\n    </ngx-spinner>\r\n\r\n\r\n\r\n\r\n\r\n    <!-- <div *ngIf=\"createMaster\"> -->\r\n        <div class=\"modal fade\" id=\"createMaster\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"actionpopupTitle\"\r\n        aria-hidden=\"true\">\r\n        <div class=\"modal-dialog modal-xl\" style=\"margin-left: 247px;\" role=\"document\">\r\n          <div class=\"modal-content\">\r\n            <div class=\"modal-header\">\r\n                <h2 class=\"modal-title\" id=\"exampleModalLabel\">Master</h2>\r\n              <button type=\"button\"  class=\"close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <mat-accordion class=\"example-headers-align\" multi>\r\n                    <mat-expansion-panel [expanded]=\"step === 0\" (opened)=\"setStep(0)\">\r\n                        <mat-expansion-panel-header>\r\n                          <mat-panel-title class=\"titlecolor\">\r\n                            <mat-icon>add</mat-icon>New Client\r\n                          </mat-panel-title>\r\n                        </mat-expansion-panel-header>\r\n\r\n                        <form [formGroup]=\"clientForm\"  autocomplete=\"off\">\r\n                            <table>\r\n                                <div>\r\n                                    <tr>\r\n                                        <td >\r\n                                            <mat-label >Client Name <label style=\"color:red\">*</label></mat-label><br>\r\n                                            <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\">\r\n                                                <input matInput class=\"matformfieldinputstyle\" type=\"text\"\r\n                                                     formControlName=\"name\" autocomplete=\"off\" \r\n                                                    >\r\n                                            </mat-form-field>\r\n                                        </td>\r\n                                        \r\n                                    </tr>\r\n                                </div>\r\n                            </table>\r\n                            <button type=\"submit\" style=\"border-radius: 10px;margin-left: 10px;\r\n                            border-color: #f5c68b;\r\n                            background-color: #f5c68b;\" (click)=\"clientSubmit()\" class=\"btn btn-light\">Submit</button>\r\n                    </form>\r\n                    </mat-expansion-panel>\r\n\r\n                    <mat-expansion-panel [expanded]=\"step === 1\" (opened)=\"setStep(1)\">\r\n                        <mat-expansion-panel-header>\r\n                          <mat-panel-title class=\"titlecolor\">\r\n                            <mat-icon>add</mat-icon>New Project \r\n                          </mat-panel-title>\r\n                        </mat-expansion-panel-header>\r\n\r\n                        <form [formGroup]=\"projectForm\"  autocomplete=\"off\">\r\n                            <table>\r\n                                <div>\r\n                                    <tr>\r\n                                        <td >\r\n                                            <mat-label >Project Name<label style=\"color:red\">*</label> </mat-label><br>\r\n                                            <mat-form-field class=\"matformfieldstyle\"  appearance=\"outline\">\r\n                                                <input matInput class=\"matformfieldinputstyle\" type=\"name\"\r\n                                                     formControlName=\"name\" autocomplete=\"off\" \r\n                                                    >\r\n                                            </mat-form-field>\r\n                                        </td>\r\n                                        <td>\r\n                                            <mat-label style=\"margin-left: 30px;\">Project Start Date<label style=\"color:red\">*</label></mat-label><br>\r\n                                            <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"margin-left: 30px;\">\r\n                        \r\n                                                <input matInput readonly [matDatepicker]=\"pickerMR\" class=\"matformfieldinputstyle\"\r\n                                                     formControlName=\"start_date\" (dateChange)=\"MasterStartDate($event.value)\" >\r\n                                                <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"pickerMR\">\r\n                                                </mat-datepicker-toggle>\r\n                                                <mat-datepicker #pickerMR></mat-datepicker>\r\n                                            </mat-form-field>\r\n                                        </td>\r\n                                        <td>\r\n                                            <mat-label style=\"margin-left: 30px;\">Planned End Date <label style=\"color:red\">*</label></mat-label><br>\r\n                                            <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\" style=\"margin-left: 30px;\">\r\n                        \r\n                                                <input matInput readonly [min]=\"set_masterStartDate\" [matDatepicker]=\"pickerMR2\" class=\"matformfieldinputstyle\"\r\n                                                     formControlName=\"end_date\" >\r\n                                                <mat-datepicker-toggle class=\"maticonsize\" matSuffix [for]=\"pickerMR2\">\r\n                                                </mat-datepicker-toggle>\r\n                                                <mat-datepicker #pickerMR2></mat-datepicker>\r\n                                            </mat-form-field>\r\n                                        </td>\r\n                                        \r\n                                    </tr>\r\n                                </div>\r\n                            </table>\r\n                            <button type=\"submit\" style=\"border-radius: 10px;margin-left: 10px;\r\n                            border-color: #f5c68b;\r\n                            background-color: #f5c68b;\" (click)=\"projectSubmit()\" class=\"btn btn-light\">Submit</button>\r\n                        </form>\r\n                    </mat-expansion-panel>\r\n\r\n\r\n                    <mat-expansion-panel [expanded]=\"step === 2\" (opened)=\"setStep(2)\">\r\n                        <mat-expansion-panel-header>\r\n                          <mat-panel-title class=\"titlecolor\">\r\n                            <mat-icon>add</mat-icon>New Module\r\n                          </mat-panel-title>\r\n                        </mat-expansion-panel-header>\r\n\r\n                        <form [formGroup]=\"moduleForm\"  autocomplete=\"off\">\r\n                            <table>\r\n                                <div>\r\n                                    <tr>\r\n                                        <td >\r\n                                            <mat-label >Module Name <label style=\"color:red\">*</label></mat-label><br>\r\n                                            <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\">\r\n                                                <input matInput class=\"matformfieldinputstyle\" type=\"name\"\r\n                                                     formControlName=\"name\" autocomplete=\"off\" \r\n                                                    >\r\n                                            </mat-form-field>\r\n                                        </td>\r\n                                      \r\n                                        \r\n                                    </tr>\r\n                                </div>\r\n                            </table>\r\n                            <button type=\"submit\" style=\"border-radius: 10px;margin-left: 10px;\r\n                            border-color: #f5c68b;\r\n                            background-color: #f5c68b;\" (click)=\"moduleSubmit()\" class=\"btn btn-light\">Submit</button>\r\n                            </form>\r\n                    </mat-expansion-panel>\r\n\r\n\r\n                    <mat-expansion-panel [expanded]=\"step === 3\" (opened)=\"setStep(3)\">\r\n                        <mat-expansion-panel-header>\r\n                          <mat-panel-title class=\"titlecolor\">\r\n                            <mat-icon>add</mat-icon>New Mapping \r\n                          </mat-panel-title>\r\n                        </mat-expansion-panel-header>\r\n\r\n                        <form [formGroup]=\"mappingForm\"  autocomplete=\"off\">\r\n                            <table>\r\n                            <div>\r\n                                <tr>\r\n                                    <td>\r\n                                        <mat-label >Client<label style=\"color:red\">*</label></mat-label><br>\r\n                                    <mat-form-field class=\"matformfieldstyle\" appearance=\"outline\"\r\n                                        (click)=\"clientmaster()\">\r\n                            \r\n                                        <input #cltmasterInput  class=\"matformfieldinputstyle\" matInput\r\n                                            formControlName=\"client_id\" [matAutocomplete]=\"cltmaster\" >\r\n                                            <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                        <mat-autocomplete #cltmaster=\"matAutocomplete\" [displayWith]=\"displayFncltmaster\"\r\n                                            (opened)=\"autocompleteCltmasterScroll()\">\r\n                                            <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                            <ng-container *ngIf=\"!isLoading\">\r\n                                                <mat-option *ngFor=\"let clt of clientmasterList\"  (focusout)=\"FocusOut_select_clientmaster(clt)\" [value]=\"clt\">\r\n                                                    {{clt.name}}\r\n                                                </mat-option>\r\n                                            </ng-container>\r\n                                        </mat-autocomplete>\r\n                                    </mat-form-field>\r\n                                    </td>\r\n                                    <td>\r\n                                        <mat-label style=\"margin-left: 30px;\">Project Name<label style=\"color:red\">*</label></mat-label><br>\r\n                                    <mat-form-field class=\"matformfieldstyle\" style=\"margin-left: 30px;\" appearance=\"outline\"\r\n                                        (click)=\"projectnamemaster()\">\r\n                            \r\n                                        <input #appnmmasterInput  class=\"matformfieldinputstyle\" matInput\r\n                                            formControlName=\"project_id\" [matAutocomplete]=\"appnmmaster\" >\r\n                                            <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                        <mat-autocomplete #appnmmaster=\"matAutocomplete\" [displayWith]=\"displayFnappnmmaster\"\r\n                                            (opened)=\"autocompleteAppnmmasterScroll()\">\r\n                                            <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                            <ng-container *ngIf=\"!isLoading\">\r\n                                                <mat-option *ngFor=\"let appnm of appNamemasterList\" (focusout)=\"FocusOut_select_projectmaster(appnm)\" [value]=\"appnm\">\r\n                                                    {{appnm.name}}\r\n                                                </mat-option>\r\n                                            </ng-container>\r\n                                        </mat-autocomplete>\r\n                                    </mat-form-field>\r\n                                    </td>\r\n                            \r\n                                    <td>\r\n                                        <mat-label style=\"margin-left: 30px;\" >Module Name<label style=\"color:red\">*</label></mat-label><br>\r\n                                    <mat-form-field class=\"matformfieldstyle\" style=\"margin-left: 30px;\" appearance=\"outline\"\r\n                                        (click)=\"modulenamemaster()\">\r\n                            \r\n                                        <input #modnmmasterInput  class=\"matformfieldinputstyle\" matInput\r\n                                            formControlName=\"module_id\" [matAutocomplete]=\"modnmmaster\" >\r\n                                            <mat-icon matSuffix class=\"maticonsize\" >unfold_more</mat-icon>\r\n                                        <mat-autocomplete #modnmmaster=\"matAutocomplete\" [displayWith]=\"displayFnmodnmmaster\"\r\n                                            (opened)=\"autocompletemodnmmasterScroll()\">\r\n                                            <mat-option *ngIf=\"isLoading\" class=\"is-loading\">Loading...</mat-option>\r\n                                            <ng-container *ngIf=\"!isLoading\">\r\n                                                <mat-option *ngFor=\"let modnm of moduleNamemasterList\" [value]=\"modnm\">\r\n                                                    {{modnm.name}}\r\n                                                </mat-option>\r\n                                            </ng-container>\r\n                                        </mat-autocomplete>\r\n                                    </mat-form-field>\r\n                                    </td>\r\n                                  \r\n                                    \r\n                                </tr>\r\n                            </div>\r\n                            </table>\r\n                            <button type=\"submit\" style=\"border-radius: 10px;margin-left: 10px;\r\n                            border-color: #f5c68b;\r\n                            background-color: #f5c68b;\" (click)=\"mappingSubmit()\" class=\"btn btn-light\">Submit</button>\r\n                            </form>\r\n                    </mat-expansion-panel>\r\n                </mat-accordion>\r\n\r\n\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n    <!-- </div> -->\r\n\r\n\r\n\r\n\r\n\r\n    <!-- <pre>{{this.taskAddForm.value | json}}</pre> -->"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}